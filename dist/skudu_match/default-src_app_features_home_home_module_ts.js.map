{"version":3,"file":"default-src_app_features_home_home_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;AAA+E;AACtC;AACC;AAMF;AAEJ;AACgD;;;;;;;;ICChFS,4DAAA,WAAuF;IAChFA,oDAAA,2CAAoC;IAAAA,0DAAA,EAAI;;;;;IAsBvBA,4DAAA,WAA2E;IAAAA,oDAAA,GAEzE;IAAAA,0DAAA,EACD;;;;IAH0EA,uDAAA,GAEzE;IAFyEA,+DAAA,CAAAM,4BAAA,CAAAC,KAAA,OAAAC,WAAA,KAAAF,4BAAA,CAAAC,KAAA,IAEzE;;;;;;IAlBtBP,4DAAA,aAAiF;IAGlEA,oDAAA,cAAO;IAAAA,0DAAA,EAAI;IAElBA,4DAAA,YAAoB;IAAAA,oDAAA,QAAC;IAAAA,0DAAA,EAAI;IAE7BA,4DAAA,cAAyC;IACcA,wDAAA,mBAAAU,gFAAA;MAAAV,2DAAA,CAAAY,GAAA;MAAA,MAAAC,MAAA,GAAAb,2DAAA;MAAA,OAASA,yDAAA,CAAAa,MAAA,CAAAG,uBAAA,EAAyB;IAAA,EAAC;IAClFhB,4DAAA,cAA0C;IACtCA,uDAAA,eAAsC;IAC1CA,0DAAA,EAAM;IACNA,4DAAA,eAA8C;IAEtCA,oDAAA,6JAEA;IAAAA,wDAAA,KAAAmB,kEAAA,mBAGC;IAAAnB,oDAAA,UACL;IAAAA,0DAAA,EAAI;;;;IAJ4CA,uDAAA,IAA6B;IAA7BA,wDAAA,YAAAqB,MAAA,CAAAC,0BAAA,CAA6B;;;;;;IAsBrFtB,4DAAA,cAAuG;IACxDA,wDAAA,mBAAAuB,qGAAA;MAAA,MAAAC,WAAA,GAAAxB,2DAAA,CAAAyB,IAAA;MAAA,MAAAC,gBAAA,GAAAF,WAAA,CAAAG,SAAA;MAAA,MAAAC,OAAA,GAAA5B,2DAAA;MAAA,OAASA,yDAAA,CAAA4B,OAAA,CAAAC,4BAAA,CAAAH,gBAAA,CAA0C;IAAA,EAAC;IAC3F1B,4DAAA,cAA0C;IACtCA,uDAAA,cAAsC;IAC1CA,0DAAA,EAAM;IACNA,4DAAA,cAA8C;IACfA,oDAAA,GAA0B;IAAAA,0DAAA,EAAI;IAGjEA,4DAAA,cAAyE;IAApDA,wDAAA,mBAAA8B,qGAAA;MAAA,MAAAN,WAAA,GAAAxB,2DAAA,CAAAyB,IAAA;MAAA,MAAAC,gBAAA,GAAAF,WAAA,CAAAG,SAAA;MAAA,MAAAI,OAAA,GAAA/B,2DAAA;MAAA,OAASA,yDAAA,CAAA+B,OAAA,CAAAC,uBAAA,CAAAN,gBAAA,CAAAO,GAAA,CAAyC;IAAA,EAAC;IACpEjC,4DAAA,YAA4B;IAAAA,oDAAA,YAAK;IAAAA,0DAAA,EAAI;;;;IAJNA,uDAAA,GAA0B;IAA1BA,+DAAA,CAAA0B,gBAAA,CAAAQ,OAAA,CAA0B;;;;;IAbrElC,qEAAA,GAA+D;IAC3DA,4DAAA,cAAgC;IAErBA,oDAAA,GAAiF;IAAAA,0DAAA,EAAI;IAE5FA,4DAAA,YAAoB;IAAAA,oDAAA,GAA8C;IAAAA,0DAAA,EAAI;IAE1EA,wDAAA,IAAAoC,+EAAA,mBAYM;IACVpC,mEAAA,EAAe;;;;;IAjBAA,uDAAA,GAAiF;IAAjFA,+DAAA,CAAAsC,mBAAA,CAAAC,SAAA,OAAA/B,WAAA,KAAA8B,mBAAA,CAAAE,MAAA,IAAiF;IAEpExC,uDAAA,GAA8C;IAA9CA,+DAAA,CAAAyC,OAAA,CAAAC,cAAA,CAAAJ,mBAAA,mBAAAG,OAAA,CAAAC,cAAA,CAAAJ,mBAAA,EAAAK,MAAA,CAA8C;IAExC3C,uDAAA,GAAmC;IAAnCA,wDAAA,YAAAyC,OAAA,CAAAC,cAAA,CAAAJ,mBAAA,EAAmC;;;;;IARzEtC,4DAAA,aAA0F;IACtFA,wDAAA,IAAA4C,yEAAA,2BAoBe;IACnB5C,0DAAA,EAAM;;;;;IArBaA,uDAAA,GAA8C;IAA9CA,wDAAA,SAAA6C,MAAA,CAAAH,cAAA,CAAAJ,mBAAA,mBAAAO,MAAA,CAAAH,cAAA,CAAAJ,mBAAA,EAAAK,MAAA,CAA8C;;;;;IA/BjE3C,wDAAA,IAAA8C,0DAAA,kBAwBM;IAMN9C,wDAAA,IAAA+C,0DAAA,iBAsBM;;;;IApDA/C,wDAAA,SAAAgD,MAAA,CAAA1B,0BAAA,CAAAqB,MAAA,CAAuC;IA8BX3C,uDAAA,GAAoB;IAApBA,wDAAA,YAAAgD,MAAA,CAAAC,iBAAA,CAAoB;;;AD/BxD,MAAOC,6BAA6B;EAItC,IAAaC,aAAaA,CAAA;IACtB,OAAO,IAAI,CAACT,cAAc;EAC9B;EACA,IAAIS,aAAaA,CAACC,KAAiC;IAC/C,IAAI,CAACV,cAAc,GAAGU,KAAK;IAC3B,IAAI,CAACH,iBAAiB,GAAGI,MAAM,CAACC,IAAI,CAAC,IAAI,CAACZ,cAAc,CAAC;IACzD,IAAI,CAACa,0BAA0B,EAAE;EACrC;EAgBAC,YAAoBC,MAAc,EAAUC,KAAqC;IAA7D,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,KAAK,GAALA,KAAK;IA1BjD;IAES,KAAAC,OAAO,GAAY,KAAK;IASvB,KAAAC,2BAA2B,GAAyB,IAAIrE,uDAAY,EAAE;IAEhF,KAAAmD,cAAc,GAA+B,EAAE;IAC/C,KAAAO,iBAAiB,GAAa,EAAE;IAEhC;IAEA;IAES,KAAA3B,0BAA0B,GAAa,EAAE;IAElD;IAEA,KAAAuC,kBAAkB,GAAY,KAAK;EAEiD;EAEpFC,QAAQA,CAAA;IACJ,IAAI,CAACP,0BAA0B,EAAE;EACrC;EAEA1B,4BAA4BA,CAACkC,YAA0B;IACnD,MAAMC,WAAW,GAAG;MAAEC,gBAAgB,EAAE,CAACF,YAAY,CAAC9B,GAAG;IAAC,CAAE;IAC5D,IAAI8B,YAAY,CAACG,SAAS,EAAE;MACxB,IAAI,CAAC,IAAI,CAACP,OAAO,EAAE;QACf,IAAI,CAAC3B,uBAAuB,CAACgC,WAAW,CAACC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAC7D,IAAI,CAACR,MAAM,CAACU,QAAQ,CAAC,CAAC,GAAGzE,yEAAa,EAAE,CAAC,EAAE;UAAEsE;QAAW,CAAE,CAAC;OAC9D,MAAM;QACH,IAAI,CAACJ,2BAA2B,CAACQ,IAAI,CAACL,YAAY,CAACM,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;QACtE,IAAI,CAACrC,uBAAuB,CAACgC,WAAW,CAACC,gBAAgB,CAAC,CAAC,CAAC,CAAC;;KAEpE,MAAM;MACH,MAAM;QAAEK,SAAS;QAAEC;MAAU,CAAE,GAAGR,YAAY;MAC9C,IAAIO,SAAS,KAAK,UAAU,EAAE;QAC1B;;MAEJ,IAAI,CAACb,MAAM,CAACU,QAAQ,CAChB,CAAC,GAAGG,SAAS,KAAK,UAAU,GAAG1E,kFAAsB,GAAGD,kFAAsB,IAAI4E,UAAU,EAAE,CAAC,EAC/F;QAAEP;MAAW,CAAE,CAClB;;EAET;EAEAQ,2BAA2BA,CAAA;IACvB,IAAI,IAAI,CAACX,kBAAkB,EAAE;MACzB,IAAII,gBAAgB,GAAa,EAAE;MACnC,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACxB,iBAAiB,CAACN,MAAM,EAAE8B,CAAC,EAAE,EAAE;QACpDR,gBAAgB,CAACS,IAAI,CACjB,GAAG,IAAI,CAAChC,cAAc,CAAC,IAAI,CAACO,iBAAiB,CAACwB,CAAC,CAAC,CAAC,CAACE,GAAG,CAAEZ,YAAY,IAAKA,YAAY,CAAC9B,GAAG,CAAC,CAC5F;;MAGL,IAAI,CAACyB,KAAK,CAACkB,QAAQ,CACf7E,2HAAiE,CAAC;QAAEkE;MAAgB,CAAE,CAAC,CAC1F;;EAET;EAEAjD,uBAAuBA,CAAA;IACnB,IAAI,CAACyC,MAAM,CAACU,QAAQ,CAAC,CAACtE,yEAAa,CAAC,EAAE;MAAEmE,WAAW,EAAE;QAAEe,QAAQ,EAAE;MAAC;IAAE,CAAE,CAAC;EAC3E;EAEA/C,uBAAuBA,CAACgD,eAAuB;IAC3C,IAAI,CAACtB,KAAK,CAACkB,QAAQ,CACf7E,2HAAiE,CAAC;MAAEkE,gBAAgB,EAAE,CAACe,eAAe;IAAC,CAAE,CAAC,CAC7G;EACL;EAEAzB,0BAA0BA,CAAA;IACtB,OAAQ,IAAI,CAACM,kBAAkB,GAC3BR,MAAM,CAAC4B,MAAM,CAAC,IAAI,CAACvC,cAAc,CAAC,CAACwC,IAAI,CAAEC,gBAAgB,IAAKA,gBAAgB,CAACxC,MAAM,CAAC,IACtFyC,OAAO,CAAC,IAAI,CAAC9D,0BAA0B,CAACqB,MAAM,CAAC;EACvD;EAAC,QAAA0C,CAAA;qBApFQnC,6BAA6B,EAAAlD,+DAAA,CAAAuF,mDAAA,GAAAvF,+DAAA,CAAAwF,8CAAA;EAAA;EAAA,QAAAC,EAAA;UAA7BvC,6BAA6B;IAAAwC,SAAA;IAAAC,MAAA;MAAAhC,OAAA;MAAAR,aAAA;MAAA7B,0BAAA;IAAA;IAAAsE,OAAA;MAAAhC,2BAAA;IAAA;IAAAiC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,uCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QClB1ClG,4DAAA,aAA4D;QAAnCA,wDAAA,mBAAAoG,4DAAAC,MAAA;UAAA,OAASA,MAAA,CAAAC,eAAA,EAAwB;QAAA,EAAC;QAGvDtG,4DAAA,aAAsB;QACIA,oDAAA,oBAAa;QAAAA,0DAAA,EAAK;QACxCA,4DAAA,WAA+E;QAAxCA,wDAAA,mBAAAuG,0DAAA;UAAA,OAASJ,GAAA,CAAA3B,2BAAA,EAA6B;QAAA,EAAC;QAACxE,4DAAA,QAAG;QAAAA,oDAAA,gBAAS;QAAAA,0DAAA,EAAI;QAOnGA,wDAAA,IAAAwG,0CAAA,eAEI;QAEJxG,wDAAA,IAAAyG,oDAAA,gCAAAzG,oEAAA,CA0Dc;QAGlBA,0DAAA,EAAM;;;;QAjEEA,uDAAA,GAA2B;QAA3BA,wDAAA,UAAAmG,GAAA,CAAAtC,kBAAA,CAA2B,aAAA8C,GAAA;;;;;;;;;;;;;;;;;;;;;;;ACXoB;AACN;;;AAEjD,MAAMG,MAAM,GAAW,CACnB;EACIC,IAAI,EAAE,EAAE;EACRC,SAAS,EAAEH,0DAAa;EACxBI,SAAS,EAAE;CACd,CACJ;AAMK,MAAOC,iBAAiB;EAAA,QAAA7B,CAAA;qBAAjB6B,iBAAiB;EAAA;EAAA,QAAAzB,EAAA;UAAjByB;EAAiB;EAAA,QAAAC,EAAA;cAHhBP,yDAAY,CAACQ,QAAQ,CAACN,MAAM,CAAC,EAC7BF,yDAAY;EAAA;;;sHAEbM,iBAAiB;IAAAG,OAAA,GAAA9B,yDAAA;IAAA+B,OAAA,GAFhBV,yDAAY;EAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdiD;AAClC;AACG;AAC4E;AAE7E;AAE6D;AACzB;AAEyB;AACrC;AAEL;AACC;AACqB;AAC+C;;;;;;;;;;;;ICb/H5G,4DAAA,cAKC;IADGA,wDAAA,mBAAAoI,kDAAA;MAAApI,2DAAA,CAAAqI,GAAA;MAAA,MAAAhH,MAAA,GAAArB,2DAAA;MAAA,OAASA,yDAAA,CAAAqB,MAAA,CAAAiH,gCAAA,EAAkC;IAAA,EAAC;IAE5CtI,4DAAA,cAA2B;IACvBA,uDAAA,oCAG6B;IACjCA,0DAAA,EAAM;;;;IARNA,yDAAA,2CAAAwI,MAAA,CAAAC,8BAAA,CAA+E;IAKvEzI,uDAAA,GAA+B;IAA/BA,wDAAA,kBAAAwI,MAAA,CAAArF,aAAA,CAA+B,+BAAAqF,MAAA,CAAAlH,0BAAA;;;;;IAanCtB,4DAAA,cAA0E;IACtEA,oDAAA,GACJ;IAAAA,0DAAA,EAAM;;;;IADFA,uDAAA,GACJ;IADIA,gEAAA,MAAA2I,MAAA,CAAAC,kBAAA,CAAAC,KAAA,MACJ;;;;;IAsCA7I,qEAAA,GAOC;IACGA,4DAAA,cAAgC;IAC5BA,oDAAA,GASJ;IAAAA,0DAAA,EAAM;IACVA,mEAAA,EAAe;;;;;IAVPA,uDAAA,GASJ;IATIA,gEAAA,MAAA8I,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,mBAAAC,MAAA,CAAAJ,kBAAA,CAAAK,YAAA,GAAAH,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,iBAAAC,MAAA,CAAAJ,kBAAA,CAAAM,qBAAA,GAAAJ,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,iBAAAC,MAAA,CAAAJ,kBAAA,CAAAO,aAAA,GAAAH,MAAA,CAAAJ,kBAAA,CAAAQ,OAAA,MASJ;;;;;;IAOJpJ,qEAAA,GAUC;IACGA,4DAAA,cAKE;IADEA,wDAAA,mBAAAqJ,mEAAAhD,MAAA;MAAArG,2DAAA,CAAAsJ,IAAA;MAAA,MAAAR,OAAA,GAAA9I,2DAAA,GAAA2B,SAAA;MAAA,MAAA4H,MAAA,GAAAvJ,2DAAA;MAAA,OAASA,yDAAA,CAAAuJ,MAAA,CAAAC,eAAA,CAAAV,OAAA,CAAAW,GAAA,EAAApD,MAAA,CAAiC;IAAA,EAAC;IAJ/CrG,0DAAA,EAKE;IACNA,mEAAA,EAAe;;;;;;IA7DnBA,4DAAA,cAKC;IAFGA,wDAAA,mBAAA0J,mDAAA;MAAA,MAAAlI,WAAA,GAAAxB,2DAAA,CAAA2J,IAAA;MAAA,MAAAb,OAAA,GAAAtH,WAAA,CAAAG,SAAA;MAAA,MAAAiI,OAAA,GAAA5J,2DAAA;MAAA,OAASA,yDAAA,CAAA4J,OAAA,CAAAC,cAAA,CAAAf,OAAA,CAAA1F,KAAA,CAAA0G,QAAA,CAAmC;IAAA,EAAC;IAG7C9J,4DAAA,cAAgC;IAExBA,uDAAA,cAAiF;IACrFA,0DAAA,EAAM;IAGVA,4DAAA,cAAoC;IACDA,oDAAA,GAAyB;IAAAA,0DAAA,EAAI;IAC5DA,4DAAA,aAA0B;IAAAA,oDAAA,GAAsB;IAAAA,0DAAA,EAAK;IAKzDA,wDAAA,IAAA+J,4CAAA,2BAmBe;IAMf/J,wDAAA,KAAAgK,6CAAA,2BAiBe;IAGnBhK,0DAAA,EAAM;;;;;IAxD8BA,uDAAA,GAAyB;IAAzBA,wDAAA,QAAA8I,OAAA,CAAA1F,KAAA,CAAA6G,MAAA,EAAAjK,2DAAA,CAAyB,QAAA8I,OAAA,CAAA1F,KAAA,CAAA+G,SAAA;IAKtBnK,uDAAA,GAAyB;IAAzBA,+DAAA,CAAA8I,OAAA,CAAA1F,KAAA,CAAAgH,QAAA,CAAyB;IAC9BpK,uDAAA,GAAsB;IAAtBA,+DAAA,CAAA8I,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,CAAsB;IAM/C/I,uDAAA,GAKD;IALCA,wDAAA,SAAA8I,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,oBAAA/F,MAAA,CAAA4F,kBAAA,CAAAK,YAAA,IAAAH,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,kBAAA/F,MAAA,CAAA4F,kBAAA,CAAAM,qBAAA,IAAAJ,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,kBAAA/F,MAAA,CAAA4F,kBAAA,CAAAQ,OAAA,IAAAN,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,kBAAA/F,MAAA,CAAA4F,kBAAA,CAAAO,aAAA,CAKD;IAoBCnJ,uDAAA,GAQJ;IARIA,wDAAA,SAAA8I,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,2BAAAD,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,wBAAAD,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,2BAAAD,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,eAAAD,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,oBAAAD,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,kBAAAD,OAAA,CAAA1F,KAAA,CAAA2F,KAAA,eAQJ;;;AD3EP,MAAOlC,aAAa;EAsBtBrD,YACYC,MAAc,EACdC,KAAqC,EACrC2G,MAAiB,EACjBC,SAAoB;IAHpB,KAAA7G,MAAM,GAANA,MAAM;IACN,KAAAC,KAAK,GAALA,KAAK;IACL,KAAA2G,MAAM,GAANA,MAAM;IACN,KAAAC,SAAS,GAATA,SAAS;IAzBrB,KAAAC,KAAK,GAAyB9C,2EAAe;IAE7C,KAAAmB,kBAAkB,GAAuB;MACrCC,KAAK,EAAE,CAAC;MACRO,OAAO,EAAE,CAAC;MACVH,YAAY,EAAE,CAAC;MACfC,qBAAqB,EAAE,CAAC;MACxBC,aAAa,EAAE;KAClB;IACD,KAAAhG,aAAa,GAA+B,EAAE;IAC9C,KAAA7B,0BAA0B,GAAa,EAAE;IAEzC,KAAAkJ,wBAAwB,GAAY,KAAK;IACzC,KAAA/B,8BAA8B,GAAY,KAAK;IAE/C,KAAAgC,cAAc,GAAY,KAAK;IAI/B,KAAAC,UAAU,GAAuB,IAAInL,uDAAY,EAAQ;EAOtD;EAEHuE,QAAQA,CAAA;IACJ,IAAI,CAACJ,KAAK,CACLiH,IAAI,CAACpD,oDAAM,CAACxH,uHAA6D,CAAC,EAAE4H,0DAAS,CAAC,IAAI,CAAC+C,UAAU,CAAC,CAAC,CACvGI,SAAS,CAAElC,kBAAsC,IAAI;MAClD,IAAI,CAACA,kBAAkB,GAAGA,kBAAkB;IAChD,CAAC,CAAC;IAEN,IAAI,CAAClF,KAAK,CACLiH,IAAI,CACDpD,oDAAM,CAACxH,6HAAmE,CAAC,EAC3E4H,0DAAS,CAAC,IAAI,CAAC+C,UAAU,CAAC,CAC7B,CACAI,SAAS,CAAE3H,aAAyC,IAAI;MACrD,IAAI,CAACA,aAAa,GAAGA,aAAa;IACtC,CAAC,CAAC;IAEN,IAAI,CAACO,KAAK,CACLiH,IAAI,CACDpD,oDAAM,CAACxH,+HAAqE,CAAC,EAC7E4H,0DAAS,CAAC,IAAI,CAAC+C,UAAU,CAAC,CAC7B,CACAI,SAAS,CAAExJ,0BAA0B,IAAI;MACtC,IAAI,CAACA,0BAA0B,GAAGA,0BAA0B;IAChE,CAAC,CAAC;IAEN,IAAI,CAACoC,KAAK,CAACkB,QAAQ,CAAC7E,oHAA0D,EAAE,CAAC;IAEjF,IAAI,CAAC2D,KAAK,CACLiH,IAAI,CAACpD,oDAAM,CAACU,oFAA8B,CAAC,EAAEN,0DAAS,CAAC,IAAI,CAAC+C,UAAU,CAAC,CAAC,CACxEI,SAAS,CAAEM,IAAsB,IAAI;MAClC,IAAIA,IAAI,EAAE;QACN,IAAI,CAACA,IAAI,GAAGA,IAAI;QAChB,IAAI,CAACX,cAAc,GAAGW,IAAI,CAACC,YAAY,CAACC,EAAE,KAAK,CAAC;QAChD,IAAI,CAAC5H,KAAK,CAACkB,QAAQ,CAACsD,wGAAuD,CAAC;UAAEkD,IAAI,EAAE,IAAI,CAACA;QAAI,CAAE,CAAC,CAAC;QACjG,IAAI,CAAC1H,KAAK,CAACkB,QAAQ,CACfsD,0GAAyD,CAAC;UAAEjG,GAAG,EAAE,IAAI,CAACmJ,IAAI,CAACnJ;QAAG,CAAE,CAAC,CACpF;QAED,IAAI,IAAI,CAACmJ,IAAI,CAACM,QAAQ,EAAE;UACpB,IAAI,CAACjI,MAAM,CAACU,QAAQ,CAAC,CAACqD,kFAAsB,CAAC,CAAC;;;IAG1D,CAAC,CAAC;EACV;EAEAmE,WAAWA,CAAA;IACP,IAAI,CAACjB,UAAU,CAACkB,IAAI,EAAE;EAC1B;EAEAC,8BAA8BA,CAAA;IAC1B,IAAI,CAACrB,wBAAwB,GAAG,IAAI;EACxC;EAEAlC,gCAAgCA,CAAA;IAC5B,IAAI,CAACG,8BAA8B,GAAG,IAAI;IAC1CqD,UAAU,CAAC,MAAK;MACZ,IAAI,CAACtB,wBAAwB,GAAG,KAAK;MACrC,IAAI,CAAC/B,8BAA8B,GAAG,KAAK;IAC/C,CAAC,EAAE,GAAG,CAAC;EACX;EAEAoB,cAAcA,CAACkC,KAAa;IACxB,IAAIA,KAAK,KAAK,WAAW,EAAE;MACvB,IAAI,IAAI,CAACtB,cAAc,EAAE;QACrB,IAAI,CAAChH,MAAM,CAACU,QAAQ,CAAC,CAAC4H,KAAK,CAAC,CAAC;OAChC,MAAM;QACH,IAAI,CAAC1B,MAAM,CAAC2B,IAAI,CAACjE,gHAA4B,EAAE;UAC3CkE,UAAU,EAAE,mBAAmB;UAC/BC,SAAS,EAAE,KAAK;UAChBC,IAAI,EAAE;YACFC,aAAa,EAAE,2BAA2B;YAC1CC,aAAa,EACT;;SAEX,CAAC;;;IAGV,IAAIN,KAAK,KAAK,oBAAoB,EAAE;MAChC,IAAI,CAAC,IAAI,CAACX,IAAI,CAACkB,QAAQ,IAAI,CAAC,IAAI,CAAClB,IAAI,CAACmB,KAAK,EAAE;QACzC,IAAI,CAAClC,MAAM,CAAC2B,IAAI,CAAC7D,2IAAwB,EAAE;UACvC8D,UAAU,EAAE,8BAA8B;UAC1CE,IAAI,EAAE;YAAEf,IAAI,EAAE,IAAI,CAACA;UAAI;SAC1B,CAAC;OACL,MAAM;QACH,MAAMoB,sBAAsB,GAAG,IAAI,CAACrJ,aAAa,CAACsJ,OAAO,CAAC9H,GAAG,CAAEZ,YAAY,IAAKA,YAAY,CAAC9B,GAAG,CAAC;QACjG,MAAM+B,WAAW,GAAG;UAAEC,gBAAgB,EAAEuI;QAAsB,CAAE;QAChE,IAAI,CAAC/I,MAAM,CAACU,QAAQ,CAAC,CAAC4H,KAAK,CAAC,EAAE;UAAE/H;QAAW,CAAE,CAAC;;KAErD,MAAM;MACH,IAAI,CAACP,MAAM,CAACU,QAAQ,CAAC,CAAC4H,KAAK,CAAC,CAAC;;EAErC;EAEAvC,eAAeA,CAACkD,OAAe,EAAEC,CAAQ;IACrCA,CAAC,CAACrG,eAAe,EAAE;IACnB,IAAI,CAAC+D,MAAM,CAAC2B,IAAI,CAACpE,gHAAsB,EAAE;MACrCqE,UAAU,EAAE,mBAAmB;MAC/BE,IAAI,EAAE;QACFS,QAAQ,EAAElF,0EAAc,CAACgF,OAAO;;KAEvC,CAAC;EACN;EAEAG,oBAAoBA,CAAA;IAChB,IAAI,CAACpJ,MAAM,CAACU,QAAQ,CAAC,CAACtE,yEAAa,CAAC,CAAC;EACzC;EAEAiN,WAAWA,CAAA;IACP,OAAO,CAAC;EACZ;EAAC,QAAAzH,CAAA;qBA1IQwB,aAAa,EAAA7G,+DAAA,CAAAuF,oDAAA,GAAAvF,+DAAA,CAAAwF,+CAAA,GAAAxF,+DAAA,CAAA+M,6EAAA,GAAA/M,+DAAA,CAAAgN,6EAAA;EAAA;EAAA,QAAAvH,EAAA;UAAboB,aAAa;IAAAnB,SAAA;IAAAG,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAiH,uBAAA/G,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCvB1BlG,4DAAA,aAAoD;QAGhDA,wDAAA,IAAAkN,4BAAA,iBAYM;QAMNlN,4DAAA,aAAsB;QACoBA,wDAAA,mBAAAmN,4CAAA;UAAA,OAAShH,GAAA,CAAA0F,8BAAA,EAAgC;QAAA,EAAC;QAC5E7L,uDAAA,aAA+D;QAC/DA,wDAAA,IAAAoN,4BAAA,iBAEM;QACVpN,0DAAA,EAAM;QACNA,4DAAA,aAAoC;QAChCA,uDAAA,aAAuF;QAC3FA,0DAAA,EAAM;QAENA,4DAAA,aAKE;QADEA,wDAAA,mBAAAqN,4CAAA;UAAA,OAASlH,GAAA,CAAA0G,oBAAA,EAAsB;QAAA,EAAC;QAJpC7M,0DAAA,EAKE;QAONA,4DAAA,aAA+B;QAC3BA,wDAAA,KAAAsN,6BAAA,mBAgEM;;QACVtN,0DAAA,EAAM;;;QA1GDA,uDAAA,GAA8B;QAA9BA,wDAAA,SAAAmG,GAAA,CAAAqE,wBAAA,CAA8B;QAoBrBxK,uDAAA,GAA8B;QAA9BA,wDAAA,SAAAmG,GAAA,CAAAyC,kBAAA,CAAAC,KAAA,CAA8B;QAsBnB7I,uDAAA,GAAgC;QAAhCA,wDAAA,YAAAA,yDAAA,QAAAmG,GAAA,CAAAoE,KAAA,EAAApE,GAAA,CAAA2G,WAAA,EAAgC;;;;;;;;;;;;;;;;;;;;;;;;;;AC7Cd;AAC2B;AAChB;AACT;AACkE;;AAO7G,MAAOY,UAAU;EAAA,QAAArI,CAAA;qBAAVqI,UAAU;EAAA;EAAA,QAAAjI,EAAA;UAAViI;EAAU;EAAA,QAAAvG,EAAA;cAHTqG,yDAAY,EAAEtG,mEAAiB,EAAEuG,kFAAqB;EAAA;;;sHAGvDC,UAAU;IAAAC,YAAA,GAJJ9G,0DAAa,EAAE3D,4HAA6B;IAAAmE,OAAA,GACjDmG,yDAAY,EAAEtG,mEAAiB,EAAEuG,kFAAqB;IAAAnG,OAAA,GACtDpE,4HAA6B;EAAA;AAAA;;;;;;;;;;;;;;;;ACTqF;;;AAQ1H,MAAO0E,sBAAsB;EAE/BpE,YACYwK,SAA+C,EACvB7B,IAA4B;IADpD,KAAA6B,SAAS,GAATA,SAAS;IACe,KAAA7B,IAAI,GAAJA,IAAI;EACrC;EAEHrI,QAAQA,CAAA,GAAU;EAElBmK,WAAWA,CAAA;IACP,IAAI,CAACD,SAAS,CAACE,KAAK,EAAE;EAC1B;EAAC,QAAA7I,CAAA;qBAXQuC,sBAAsB,EAAA5H,+DAAA,CAAAuF,+EAAA,GAAAvF,+DAAA,CAInB+N,mFAAe;EAAA;EAAA,QAAAtI,EAAA;UAJlBmC,sBAAsB;IAAAlC,SAAA;IAAAG,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAmI,gCAAAjI,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCTnClG,4DAAA,aAAyB;QAI8DA,wDAAA,mBAAAoO,qDAAA;UAAA,OAASjI,GAAA,CAAA8H,WAAA,EAAa;QAAA,EAAC;QAAtGjO,0DAAA,EAAyG;QAEzGA,uDAAA,aAAqE;QAErEA,4DAAA,YAA2B;QACpBA,oDAAA,GAA4B;QAAAA,0DAAA,EAAI;QAQ3CA,4DAAA,aAAqC;QACjCA,uDAAA,WAA0C;QAC9CA,0DAAA,EAAM;QAMNA,4DAAA,gBAAyD;QAAxBA,wDAAA,mBAAAqO,wDAAA;UAAA,OAASlI,GAAA,CAAA8H,WAAA,EAAa;QAAA,EAAC;QAACjO,oDAAA,qBAAa;QAAAA,0DAAA,EAAS;;;QAnBvDA,uDAAA,GAAmC;QAAnCA,mEAAA,QAAAmG,GAAA,CAAAgG,IAAA,CAAAS,QAAA,kBAAAzG,GAAA,CAAAgG,IAAA,CAAAS,QAAA,CAAA2B,QAAA,EAAAvO,2DAAA,CAAmC;QAGhDA,uDAAA,GAA4B;QAA5BA,+DAAA,CAAAmG,GAAA,CAAAgG,IAAA,CAAAS,QAAA,kBAAAzG,GAAA,CAAAgG,IAAA,CAAAS,QAAA,CAAA4B,OAAA,CAA4B;QAShCxO,uDAAA,GAAiC;QAAjCA,wDAAA,cAAAmG,GAAA,CAAAgG,IAAA,CAAAS,QAAA,kBAAAzG,GAAA,CAAAgG,IAAA,CAAAS,QAAA,CAAA6B,IAAA,EAAAzO,4DAAA,CAAiC","sources":["./src/app/features/home/components/notification-dropdown/notification-dropdown.component.ts","./src/app/features/home/components/notification-dropdown/notification-dropdown.component.html","./src/app/features/home/home-routing.module.ts","./src/app/features/home/home.component.ts","./src/app/features/home/home.component.html","./src/app/features/home/home.module.ts","./src/app/features/shared/components/step-info-modal/step-info-modal.component.ts","./src/app/features/shared/components/step-info-modal/step-info-modal.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Dictionary } from '@ngrx/entity';\r\nimport {\r\n    BROKERS_ROUTE,\r\n    NEGOTIATION_EDIT_ROUTE,\r\n    NEGOTIATION_VIEW_ROUTE,\r\n    PROFILE_ROUTE,\r\n} from 'src/app/core/helpers/constants';\r\nimport { Notification } from 'src/app/core/models/viewModels';\r\nimport { Store } from '@ngrx/store';\r\nimport * as fromNotifications from 'src/app/core/ngrx/entities/notifications/index';\r\n\r\n@Component({\r\n    selector: 'app-notification-dropdown',\r\n    templateUrl: './notification-dropdown.component.html',\r\n    styleUrls: ['./notification-dropdown.component.scss'],\r\n})\r\nexport class NotificationDropdownComponent implements OnInit {\r\n    // #region Notifications\r\n\r\n    @Input() isAgent: boolean = false;\r\n    @Input() get notifications(): Dictionary<Notification[]> {\r\n        return this._notifications;\r\n    }\r\n    set notifications(value: Dictionary<Notification[]>) {\r\n        this._notifications = value;\r\n        this.notificationTypes = Object.keys(this._notifications);\r\n        this.doNotificationsExistHelper();\r\n    }\r\n    @Output() $handleNotificationNavigate: EventEmitter<number> = new EventEmitter();\r\n\r\n    _notifications: Dictionary<Notification[]> = {};\r\n    notificationTypes: string[] = [];\r\n\r\n    // #endregion\r\n\r\n    // #region Incomplete User Profile Items\r\n\r\n    @Input() incompleteUserProfileItems: string[] = [];\r\n\r\n    // #endegion\r\n\r\n    notificationsExist: boolean = false;\r\n\r\n    constructor(private router: Router, private store: Store<fromNotifications.State>) {}\r\n\r\n    ngOnInit(): void {\r\n        this.doNotificationsExistHelper();\r\n    }\r\n\r\n    handleNavigateToNotification(notification: Notification): void {\r\n        const queryParams = { notificationUids: [notification.uid] };\r\n        if (notification.senderUid) {\r\n            if (!this.isAgent) {\r\n                this.handleClearNotification(queryParams.notificationUids[0]);\r\n                this.router.navigate([`${BROKERS_ROUTE}`], { queryParams });\r\n            } else {\r\n                this.$handleNotificationNavigate.emit(notification.newRequest ? 1 : 0);\r\n                this.handleClearNotification(queryParams.notificationUids[0]);\r\n            }\r\n        } else {\r\n            const { lotStatus, lotMatchId } = notification;\r\n            if (lotStatus === 'declined') {\r\n                return;\r\n            }\r\n            this.router.navigate(\r\n                [`${lotStatus === 'complete' ? NEGOTIATION_VIEW_ROUTE : NEGOTIATION_EDIT_ROUTE}/${lotMatchId}`],\r\n                { queryParams },\r\n            );\r\n        }\r\n    }\r\n\r\n    handleClearAllNotifications() {\r\n        if (this.notificationsExist) {\r\n            let notificationUids: string[] = [];\r\n            for (let i = 0; i < this.notificationTypes.length; i++) {\r\n                notificationUids.push(\r\n                    ...this._notifications[this.notificationTypes[i]].map((notification) => notification.uid),\r\n                );\r\n            }\r\n\r\n            this.store.dispatch(\r\n                fromNotifications.notificationActions.ReqToggleNotificationStatus({ notificationUids }),\r\n            );\r\n        }\r\n    }\r\n\r\n    handleNavigateToProfile(): void {\r\n        this.router.navigate([PROFILE_ROUTE], { queryParams: { tabIndex: 2 } });\r\n    }\r\n\r\n    handleClearNotification(notificationUid: string) {\r\n        this.store.dispatch(\r\n            fromNotifications.notificationActions.ReqToggleNotificationStatus({ notificationUids: [notificationUid] }),\r\n        );\r\n    }\r\n\r\n    doNotificationsExistHelper(): boolean {\r\n        return (this.notificationsExist =\r\n            Object.values(this._notifications).some((notificationType) => notificationType.length) ||\r\n            Boolean(this.incompleteUserProfileItems.length));\r\n    }\r\n}\r\n","<div class=\"l-container\" (click)=\"$event.stopPropagation()\">\r\n    <!-- #region Header -->\r\n\r\n    <div class=\"l-header\">\r\n        <h1 class=\"g-text-h1\">Notifications</h1>\r\n        <p class=\"g-text-p l-blue g-clickable\" (click)=\"handleClearAllNotifications()\"><b>Clear All</b></p>\r\n    </div>\r\n\r\n    <!-- #endregion -->\r\n\r\n    <!-- #region Notifications -->\r\n\r\n    <p *ngIf=\"!notificationsExist; else showNotifications\" class=\"g-fade-in g-text-p mt-3\">\r\n        <i>You don't have any new notifications</i>\r\n    </p>\r\n\r\n    <ng-template #showNotifications>\r\n        <!-- #region Incomplete User Profile Notification -->\r\n\r\n        <div *ngIf=\"incompleteUserProfileItems.length\" class=\"l-notifications-container\">\r\n            <div class=\"l-secondary-header\">\r\n                <h2 class=\"g-text-h2 pb-2\">\r\n                    <b>Profile</b>\r\n                </h2>\r\n                <p class=\"g-text-p\">1</p>\r\n            </div>\r\n            <div class=\"l-notification\" [mat-ripple]>\r\n                <div class=\"l-profile-notification-info-container\" (click)=\"handleNavigateToProfile()\">\r\n                    <div class=\"l-notification-dot-container\">\r\n                        <div class=\"l-notification-dot\"></div>\r\n                    </div>\r\n                    <div class=\"l-notification-message-container\">\r\n                        <p class=\"g-text-p l-left\">\r\n                            We noticed you haven't completed your profile. We need all this information to ensure trust\r\n                            between counterparties. You still need to provide your:\r\n                            <span *ngFor=\"let incompleteUserProfileItem of incompleteUserProfileItems\">{{\r\n                                incompleteUserProfileItem.slice(0, 1).toUpperCase() + incompleteUserProfileItem.slice(1)\r\n                            }}</span\r\n                            >.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- #endregion -->\r\n\r\n        <!-- #region Notifications -->\r\n\r\n        <div *ngFor=\"let notificationType of notificationTypes\" class=\"l-notifications-container\">\r\n            <ng-container *ngIf=\"_notifications[notificationType]?.length\">\r\n                <div class=\"l-secondary-header\">\r\n                    <h2 class=\"g-text-h2 pb-2\">\r\n                        <b>{{ notificationType.substring(0, 1).toUpperCase() + notificationType.substr(1) }}</b>\r\n                    </h2>\r\n                    <p class=\"g-text-p\">{{ _notifications[notificationType]?.length }}</p>\r\n                </div>\r\n                <div *ngFor=\"let notification of _notifications[notificationType]\" class=\"l-notification\" [mat-ripple]>\r\n                    <div class=\"l-notification-info-container\" (click)=\"handleNavigateToNotification(notification)\">\r\n                        <div class=\"l-notification-dot-container\">\r\n                            <div class=\"l-notification-dot\"></div>\r\n                        </div>\r\n                        <div class=\"l-notification-message-container\">\r\n                            <p class=\"g-text-p l-left\">{{ notification.message }}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"l-clear\" (click)=\"handleClearNotification(notification.uid)\">\r\n                        <p class=\"g-text-p l-green\">Clear</p>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n\r\n        <!-- #endregion -->\r\n    </ng-template>\r\n\r\n    <!-- #endregion -->\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { HomeComponent } from './home.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: HomeComponent,\r\n        pathMatch: 'full',\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class HomeRoutingModule {}\r\n","import { Component, EventEmitter, OnDestroy, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { BROKER_DASHBOARD_ROUTE, HOME_CARDS_DATA, PROFILE_ROUTE, STEP_INFO_DATA } from 'src/app/core/helpers/constants';\r\nimport { HomeCard, Notification, NotificationCounts } from 'src/app/core/models/viewModels';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Dictionary } from '@ngrx/entity';\r\nimport { StepInfoModalComponent } from '../shared/components/step-info-modal/step-info-modal.component';\r\nimport { MatLegacyDialog as MatDialog } from '@angular/material/legacy-dialog';\r\nimport { User } from 'src/app/core/models/queryModels';\r\nimport { PremiumFeatureModalComponent } from '../premium-feature-modal/premium-feature-modal.component';\r\nimport { Purchases } from '@awesome-cordova-plugins/purchases/ngx';\r\n\r\nimport * as fromAuth from 'src/app/core/ngrx/authState/index';\r\nimport * as fromBrokers from 'src/app/core/ngrx/brokers/index';\r\nimport * as fromNotifications from 'src/app/core/ngrx/entities/notifications/index';\r\nimport { UpdateInfoModalComponent } from '../dashboard/components/agents/components/update-info-modal/update-info-modal.component';\r\n\r\n@Component({\r\n    selector: 'app-home',\r\n    templateUrl: './home.component.html',\r\n    styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit, OnDestroy {\r\n    cards: Dictionary<HomeCard> = HOME_CARDS_DATA;\r\n\r\n    notificationCounts: NotificationCounts = {\r\n        total: 0,\r\n        profile: 0,\r\n        negotiations: 0,\r\n        completedNegotiations: 0,\r\n        brokerRequest: 0,\r\n    };\r\n    notifications: Dictionary<Notification[]> = {};\r\n    incompleteUserProfileItems: string[] = [];\r\n\r\n    showNotificationDropDown: boolean = false;\r\n    animateNotificationDropDownOut: boolean = false;\r\n\r\n    userIsVerified: boolean = false;\r\n\r\n    user: User;\r\n\r\n    destroyed$: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private store: Store<fromNotifications.State>,\r\n        private dialog: MatDialog,\r\n        private purchases: Purchases,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this.store\r\n            .pipe(select(fromNotifications.notificationSelectors.getNotificationCounts), takeUntil(this.destroyed$))\r\n            .subscribe((notificationCounts: NotificationCounts) => {\r\n                this.notificationCounts = notificationCounts;\r\n            });\r\n\r\n        this.store\r\n            .pipe(\r\n                select(fromNotifications.notificationSelectors.getNotificationsForDropDown),\r\n                takeUntil(this.destroyed$),\r\n            )\r\n            .subscribe((notifications: Dictionary<Notification[]>) => {\r\n                this.notifications = notifications;\r\n            });\r\n\r\n        this.store\r\n            .pipe(\r\n                select(fromNotifications.notificationSelectors.getIncompleteUserProfileItems),\r\n                takeUntil(this.destroyed$),\r\n            )\r\n            .subscribe((incompleteUserProfileItems) => {\r\n                this.incompleteUserProfileItems = incompleteUserProfileItems;\r\n            });\r\n\r\n        this.store.dispatch(fromNotifications.notificationActions.ReqUserNotifications());\r\n\r\n        this.store\r\n            .pipe(select(fromAuth.authSelectors.getUser), takeUntil(this.destroyed$))\r\n            .subscribe((user: User | undefined) => {\r\n                if (user) {\r\n                    this.user = user;\r\n                    this.userIsVerified = user.verification.id !== 6;\r\n                    this.store.dispatch(fromBrokers.brokersActions.ReqBrokersAndDistance_Shared({ user: this.user }));\r\n                    this.store.dispatch(\r\n                        fromBrokers.brokersActions.ReqClientBrokerRequests_Client({ uid: this.user.uid }),\r\n                    );\r\n\r\n                    if (this.user.isBroker) {\r\n                        this.router.navigate([BROKER_DASHBOARD_ROUTE]);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroyed$.next();\r\n    }\r\n\r\n    handleShowNotificationDropDown() {\r\n        this.showNotificationDropDown = true;\r\n    }\r\n\r\n    handleRemoveNotificationDropDown() {\r\n        this.animateNotificationDropDownOut = true;\r\n        setTimeout(() => {\r\n            this.showNotificationDropDown = false;\r\n            this.animateNotificationDropDownOut = false;\r\n        }, 300);\r\n    }\r\n\r\n    handleNavigate(route: string) {\r\n        if (route === '/clearing') {\r\n            if (this.userIsVerified) {\r\n                this.router.navigate([route]);\r\n            } else {\r\n                this.dialog.open(PremiumFeatureModalComponent, {\r\n                    panelClass: 'g-modal-container',\r\n                    autoFocus: false,\r\n                    data: {\r\n                        featurePhrase: 'Safety and peace of mind.',\r\n                        subscribeText:\r\n                            'Subscribe to MX and let us help you clear your trade in the safest way possible.',\r\n                    },\r\n                });\r\n            }\r\n        }\r\n        if (route === '/dashboard/brokers') {\r\n            if (!this.user.location || !this.user.phone) {\r\n                this.dialog.open(UpdateInfoModalComponent, {\r\n                    panelClass: 'g-modal-container-sm-padding',\r\n                    data: { user: this.user },\r\n                });\r\n            } else {\r\n                const brokerNotificationUids = this.notifications.brokers.map((notification) => notification.uid);\r\n                const queryParams = { notificationUids: brokerNotificationUids };\r\n                this.router.navigate([route], { queryParams });\r\n            }\r\n        } else {\r\n            this.router.navigate([route]);\r\n        }\r\n    }\r\n\r\n    handleInfoModal(stepKey: string, e: Event): void {\r\n        e.stopPropagation();\r\n        this.dialog.open(StepInfoModalComponent, {\r\n            panelClass: 'g-modal-container',\r\n            data: {\r\n                stepInfo: STEP_INFO_DATA[stepKey],\r\n            },\r\n        });\r\n    }\r\n\r\n    handleRouteToProfile() {\r\n        this.router.navigate([PROFILE_ROUTE]);\r\n    }\r\n\r\n    handleOrder() {\r\n        return 0;\r\n    }\r\n}\r\n","<div class=\"g-app-dimensions l-container g-fade-in\">\r\n    <!-- #region Notification Dropdown -->\r\n\r\n    <div\r\n        *ngIf=\"showNotificationDropDown\"\r\n        class=\"l-notification-dropdown-container\"\r\n        [class.l-hide-notification-dropdown-container]=\"animateNotificationDropDownOut\"\r\n        (click)=\"handleRemoveNotificationDropDown()\"\r\n    >\r\n        <div class=\"g-fade-in-top\">\r\n            <app-notification-dropdown\r\n                [notifications]=\"notifications\"\r\n                [incompleteUserProfileItems]=\"incompleteUserProfileItems\"\r\n            ></app-notification-dropdown>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- #endregion -->\r\n\r\n    <!-- #region Header -->\r\n\r\n    <div class=\"l-header\">\r\n        <div class=\"l-notification-container\" (click)=\"handleShowNotificationDropDown()\">\r\n            <img src=\"./assets/icons/bell-blue-icon.svg\" alt=\"Blue bell\" />\r\n            <div *ngIf=\"notificationCounts.total\" class=\"g-notification-dot-protrude\">\r\n                {{ notificationCounts.total }}\r\n            </div>\r\n        </div>\r\n        <div class=\"l-header-img-container\">\r\n            <img class=\"l-header-img\" src=\"./assets/images/MX-logo-full.svg\" alt=\"MX Match Logo\" />\r\n        </div>\r\n\r\n        <img\r\n            class=\"l-profile-img\"\r\n            src=\"./assets/icons/user-blue-icon.svg\"\r\n            alt=\"User Icon\"\r\n            (click)=\"handleRouteToProfile()\"\r\n        />\r\n    </div>\r\n\r\n    <!-- #endregion -->\r\n\r\n    <!-- #region Content -->\r\n\r\n    <div class=\"l-cards-container\">\r\n        <div\r\n            *ngFor=\"let card of cards | keyvalue: handleOrder\"\r\n            class=\"l-card\"\r\n            (click)=\"handleNavigate(card.value.routesTo)\"\r\n            matRipple\r\n        >\r\n            <div class=\"d-flex flex-column\">\r\n                <div class=\"l-card-img-container\">\r\n                    <img class=\"l-card-img\" [src]=\"card.value.source\" [alt]=\"card.value.sourceAlt\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"l-card-title-container\">\r\n                <p class=\"g-text-p-small-dark\">{{ card.value.stepText }}</p>\r\n                <h2 class=\"g-text-h2 m-0\">{{ card.value.title }}</h2>\r\n            </div>\r\n\r\n            <!-- #region Notification Dot -->\r\n\r\n            <ng-container\r\n                *ngIf=\"\r\n                    (card.value.title === 'Negotiate' && notificationCounts.negotiations) ||\r\n                    (card.value.title === 'Matches' && notificationCounts.completedNegotiations) ||\r\n                    (card.value.title === 'Profile' && notificationCounts.profile) ||\r\n                    (card.value.title === 'Brokers' && notificationCounts.brokerRequest)\r\n                \"\r\n            >\r\n                <div class=\"g-notification-dot\">\r\n                    {{\r\n                        card.value.title === 'Negotiate'\r\n                            ? notificationCounts.negotiations\r\n                            : card.value.title === 'Matches'\r\n                            ? notificationCounts.completedNegotiations\r\n                            : card.value.title === 'Brokers'\r\n                            ? notificationCounts.brokerRequest\r\n                            : notificationCounts.profile\r\n                    }}\r\n                </div>\r\n            </ng-container>\r\n\r\n            <!-- #endregion -->\r\n\r\n            <!-- #region Info Icon -->\r\n\r\n            <ng-container\r\n                *ngIf=\"\r\n                    card.value.title === 'Browse MX Market' ||\r\n                    card.value.title === 'Clear with MX' ||\r\n                    card.value.title === 'Scout the Market' ||\r\n                    card.value.title === 'Lots' ||\r\n                    card.value.title === 'Negotiate' ||\r\n                    card.value.title === 'Matches' ||\r\n                    card.value.title === 'Brokers'\r\n                \"\r\n            >\r\n                <img\r\n                    class=\"g-card-info-icon\"\r\n                    src=\"./assets/icons/info-icon-blue.svg\"\r\n                    alt=\"info icon\"\r\n                    (click)=\"handleInfoModal(card.key, $event)\"\r\n                />\r\n            </ng-container>\r\n\r\n            <!-- #endregion -->\r\n        </div>\r\n    </div>\r\n\r\n    <!-- #endregion -->\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AngularMaterialModule } from '../shared/angular-material.module';\r\nimport { HomeRoutingModule } from './home-routing.module';\r\nimport { HomeComponent } from './home.component';\r\nimport { NotificationDropdownComponent } from './components/notification-dropdown/notification-dropdown.component';\r\n\r\n@NgModule({\r\n    declarations: [HomeComponent, NotificationDropdownComponent],\r\n    imports: [CommonModule, HomeRoutingModule, AngularMaterialModule],\r\n    exports: [NotificationDropdownComponent],\r\n})\r\nexport class HomeModule {}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatLegacyDialogRef as MatDialogRef, MAT_LEGACY_DIALOG_DATA as MAT_DIALOG_DATA } from '@angular/material/legacy-dialog';\r\nimport { StepInfo } from 'src/app/core/models/viewModels';\r\n\r\n@Component({\r\n    selector: 'app-step-info-modal',\r\n    templateUrl: './step-info-modal.component.html',\r\n    styleUrls: ['./step-info-modal.component.scss'],\r\n})\r\nexport class StepInfoModalComponent implements OnInit {\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<StepInfoModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: { stepInfo: StepInfo },\r\n    ) {}\r\n\r\n    ngOnInit(): void {}\r\n\r\n    handleClose(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n","<div class=\"l-container\">\r\n    <!-- #region Header -->\r\n\r\n    <div class=\"l-header\">\r\n        <img class=\"l-close-icon\" src=\"./assets/icons/close-icon-dark.svg\" alt=\"close\" (click)=\"handleClose()\" />\r\n\r\n        <img class=\"l-icon\" src=\"{{ data.stepInfo?.iconPath }}\" alt=\"icon\" />\r\n\r\n        <h1 class=\"g-text-h1-dark\">\r\n            <b>{{ data.stepInfo?.heading }}</b>\r\n        </h1>\r\n    </div>\r\n\r\n    <!-- #endregion -->\r\n\r\n    <!-- #region Modal Content -->\r\n\r\n    <div class=\"l-content g-text-p-dark\">\r\n        <p [innerHTML]=\"data.stepInfo?.body\" ></p>\r\n    </div>\r\n\r\n    <!-- #endregion -->\r\n\r\n    <!-- #region Buttons -->\r\n\r\n    <button class=\"g-primary-button\" (click)=\"handleClose()\">Okay, got it!</button>\r\n\r\n    <!-- #endregion -->\r\n</div>\r\n"],"names":["EventEmitter","Router","Dictionary","BROKERS_ROUTE","NEGOTIATION_EDIT_ROUTE","NEGOTIATION_VIEW_ROUTE","PROFILE_ROUTE","Store","fromNotifications","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","incompleteUserProfileItem_r6","slice","toUpperCase","ɵɵlistener","NotificationDropdownComponent_ng_template_8_div_0_Template_div_click_8_listener","ɵɵrestoreView","_r8","ctx_r7","ɵɵnextContext","ɵɵresetView","handleNavigateToProfile","ɵɵelement","ɵɵtemplate","NotificationDropdownComponent_ng_template_8_div_0_span_14_Template","ɵɵproperty","ctx_r3","incompleteUserProfileItems","NotificationDropdownComponent_ng_template_8_div_1_ng_container_1_div_7_Template_div_click_1_listener","restoredCtx","_r14","notification_r12","$implicit","ctx_r13","handleNavigateToNotification","NotificationDropdownComponent_ng_template_8_div_1_ng_container_1_div_7_Template_div_click_7_listener","ctx_r15","handleClearNotification","uid","message","ɵɵelementContainerStart","NotificationDropdownComponent_ng_template_8_div_1_ng_container_1_div_7_Template","ɵɵelementContainerEnd","notificationType_r9","substring","substr","ctx_r10","_notifications","length","NotificationDropdownComponent_ng_template_8_div_1_ng_container_1_Template","ctx_r4","NotificationDropdownComponent_ng_template_8_div_0_Template","NotificationDropdownComponent_ng_template_8_div_1_Template","ctx_r2","notificationTypes","NotificationDropdownComponent","notifications","value","Object","keys","doNotificationsExistHelper","constructor","router","store","isAgent","$handleNotificationNavigate","notificationsExist","ngOnInit","notification","queryParams","notificationUids","senderUid","navigate","emit","newRequest","lotStatus","lotMatchId","handleClearAllNotifications","i","push","map","dispatch","notificationActions","ReqToggleNotificationStatus","tabIndex","notificationUid","values","some","notificationType","Boolean","_","ɵɵdirectiveInject","i1","i2","_2","selectors","inputs","outputs","decls","vars","consts","template","NotificationDropdownComponent_Template","rf","ctx","NotificationDropdownComponent_Template_div_click_0_listener","$event","stopPropagation","NotificationDropdownComponent_Template_p_click_4_listener","NotificationDropdownComponent_p_7_Template","NotificationDropdownComponent_ng_template_8_Template","ɵɵtemplateRefExtractor","_r1","RouterModule","HomeComponent","routes","path","component","pathMatch","HomeRoutingModule","_3","forChild","imports","exports","select","BROKER_DASHBOARD_ROUTE","HOME_CARDS_DATA","STEP_INFO_DATA","takeUntil","StepInfoModalComponent","MatLegacyDialog","MatDialog","PremiumFeatureModalComponent","Purchases","fromAuth","fromBrokers","UpdateInfoModalComponent","HomeComponent_div_1_Template_div_click_0_listener","_r4","handleRemoveNotificationDropDown","ɵɵclassProp","ctx_r0","animateNotificationDropDownOut","ɵɵtextInterpolate1","ctx_r1","notificationCounts","total","card_r5","title","ctx_r6","negotiations","completedNegotiations","brokerRequest","profile","HomeComponent_div_10_ng_container_10_Template_img_click_1_listener","_r11","ctx_r9","handleInfoModal","key","HomeComponent_div_10_Template_div_click_0_listener","_r13","ctx_r12","handleNavigate","routesTo","HomeComponent_div_10_ng_container_9_Template","HomeComponent_div_10_ng_container_10_Template","source","ɵɵsanitizeUrl","sourceAlt","stepText","dialog","purchases","cards","showNotificationDropDown","userIsVerified","destroyed$","pipe","notificationSelectors","getNotificationCounts","subscribe","getNotificationsForDropDown","getIncompleteUserProfileItems","ReqUserNotifications","authSelectors","getUser","user","verification","id","brokersActions","ReqBrokersAndDistance_Shared","ReqClientBrokerRequests_Client","isBroker","ngOnDestroy","next","handleShowNotificationDropDown","setTimeout","route","open","panelClass","autoFocus","data","featurePhrase","subscribeText","location","phone","brokerNotificationUids","brokers","stepKey","e","stepInfo","handleRouteToProfile","handleOrder","i3","i4","HomeComponent_Template","HomeComponent_div_1_Template","HomeComponent_Template_div_click_3_listener","HomeComponent_div_5_Template","HomeComponent_Template_img_click_8_listener","HomeComponent_div_10_Template","ɵɵpipeBind2","CommonModule","AngularMaterialModule","HomeModule","declarations","MatLegacyDialogRef","MatDialogRef","MAT_LEGACY_DIALOG_DATA","MAT_DIALOG_DATA","dialogRef","handleClose","close","StepInfoModalComponent_Template","StepInfoModalComponent_Template_img_click_2_listener","StepInfoModalComponent_Template_button_click_9_listener","ɵɵpropertyInterpolate","iconPath","heading","body","ɵɵsanitizeHtml"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}