{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/core/ngrx/entities/negotiations/negotiation.effects.ts"],"sourcesContent":["import { NEGOTIATING_ROOM_ROUTE, NEGOTIATION_EDIT_ROUTE } from './../../../helpers/constants';\r\nimport { Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { ApiService } from 'src/app/core/services/api/api.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\r\n\r\nimport { switchMap, mergeMap, catchError, take } from 'rxjs/operators';\r\n\r\nimport { negotiationActions } from '../negotiations/index';\r\nimport * as fromRoot from 'src/app/core/ngrx/reducers/index';\r\nimport * as snackBarConfigs from '../../../helpers/snackbar';\r\n\r\n@Injectable()\r\nexport class NegotiationEffects {\r\n    // #region CREATE\r\n    // #endregion\r\n\r\n    // #region READ\r\n    // #region ReqUserNegotiations\r\n    ReqUserNegotiations$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(negotiationActions.ReqUserNegotiationCards),\r\n            mergeMap((payload) => {\r\n                const clientUid = payload.clientUid;\r\n                return this.store.pipe(\r\n                    select(fromRoot.authSelectors.getUserEntities),\r\n                    take(1),\r\n                    switchMap((entities) => {\r\n                        return this.api.getEntityById(entities[0].id);\r\n                    }),\r\n                    switchMap((entity) => {\r\n                        const tradingEntityId = entity.tradingEntities[0].id;\r\n                        return this.api.getUserNegotiationCards(tradingEntityId, clientUid);\r\n                    }),\r\n                    switchMap((negotiationCards) => {\r\n                        const activeNegotiationCards = negotiationCards.filter((card) => !card.isCompleted);\r\n                        const completedNegotiationCards = negotiationCards.filter((card) => card.isCompleted);\r\n\r\n                        return [\r\n                            negotiationActions.UserNegotiationCardsSuccess({\r\n                                activeNegotiationCards,\r\n                                completedNegotiationCards,\r\n                            }),\r\n                        ];\r\n                    }),\r\n                    catchError((error) => {\r\n                        console.log('ReqUserNegotiations: ', error.message);\r\n                        return [negotiationActions.UserNegotiationCardsFail()];\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n\r\n    // #region ReqGetAvailableMatchIds\r\n    ReqGetAvailableMatchIds$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(negotiationActions.ReqGetAvailableMatchIds),\r\n            switchMap((payload) => {\r\n                return this.api.getAvailableMatchedIds(payload.lotMatchId, payload.clientUid).pipe(\r\n                    mergeMap((lotMatchIds) => {\r\n                        return [negotiationActions.GetAvailableMatchIdsSuccess({ lotMatchIds })];\r\n                    }),\r\n                    catchError((error) => {\r\n                        console.log('ReqGetAvailableMatchIds: ', error.message);\r\n                        return [negotiationActions.GetAvailableMatchIdsFail()];\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n    // #region ReqLatestLotMatchIteration\r\n    ReqLatestLotMatchIteration$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(negotiationActions.ReqLatestLotMatchIteration),\r\n            mergeMap((payload) => {\r\n                return this.api.getLotMatchIterations(payload.lotMatchId).pipe(\r\n                    mergeMap((lotMatchIterations) => {\r\n                        const latestMatch = lotMatchIterations.splice(-1)[0];\r\n                        return [\r\n                            negotiationActions.LatestLotMatchIterationSuccess({\r\n                                latestMatch,\r\n                            }),\r\n                        ];\r\n                    }),\r\n                    catchError((error) => {\r\n                        console.log('ReqLatestLotMatchIteration: ', error.message);\r\n                        this.snackbar.open(\r\n                            'There was an error when attempting to fetch the match. Please refresh the page and try again.',\r\n                            'CLOSE',\r\n                            snackBarConfigs.notificationConfig,\r\n                        );\r\n                        return [negotiationActions.LatestLotMatchIterationFail()];\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n    // #endregion\r\n\r\n    // #region UPDATE\r\n    // #region ReqCompleteNegotiation\r\n    ReqCompleteNegotiation$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(negotiationActions.ReqCompleteNegotiation),\r\n            mergeMap((payload) => {\r\n                return this.api\r\n                    .completeNegotiation(payload.lotMatch, payload.clientHasBroker, payload.counterPartyHasBroker)\r\n                    .pipe(\r\n                        mergeMap(() => {\r\n                            return [negotiationActions.CompleteNegotiationSuccess()];\r\n                        }),\r\n                        catchError((error) => {\r\n                            console.log('ReqCompleteNegotiation: ', error.message);\r\n                            this.snackbar.open(\r\n                                'The Negotiation details seem to have changed. Please refresh for latest match values or check your completed Negotiations. ',\r\n                                'CLOSE',\r\n                                snackBarConfigs.notificationConfig,\r\n                            );\r\n                            return [negotiationActions.CompleteNegotiationFail()];\r\n                        }),\r\n                    );\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n    // #region ReqDeclineNegotiation\r\n    ReqDeclineNegotiation$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(negotiationActions.ReqDeclineNegotiation),\r\n            mergeMap((payload) => {\r\n                return this.api.declineNegotiation(payload.lotMatch).pipe(\r\n                    mergeMap(() => {\r\n                        this.snackbar.open(\r\n                            'Negotiation Declined Successfully',\r\n                            'CLOSE',\r\n                            snackBarConfigs.notificationConfig,\r\n                        );\r\n                        const updatedActiveNegotiationIds = payload.activeNegotiationIds.filter(\r\n                            (activeNegotiationId) => activeNegotiationId !== payload.lotMatch.id,\r\n                        );\r\n                        if (updatedActiveNegotiationIds.length === 0) this.router.navigate([NEGOTIATING_ROOM_ROUTE]);\r\n                        return [\r\n                            negotiationActions.DeclineNegotiationSuccess({\r\n                                activeNegotiationIds: updatedActiveNegotiationIds,\r\n                            }),\r\n                            negotiationActions.GetAvailableMatchIdsSuccess({\r\n                                lotMatchIds: updatedActiveNegotiationIds,\r\n                            }),\r\n                        ];\r\n                    }),\r\n                    catchError((error) => {\r\n                        console.log('ReqDeclineNegotiation: ', error.message);\r\n                        this.snackbar.open(\r\n                            'Failed To Decline Negotiation. Please Try Again',\r\n                            'CLOSE',\r\n                            snackBarConfigs.notificationConfig,\r\n                        );\r\n                        return [negotiationActions.DeclineNegotiationFail()];\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n    // #region ReqClearNegotiation\r\n    ReqClearNegotiation$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(negotiationActions.ReqClearNegotiation),\r\n            mergeMap((payload) => {\r\n                return this.api.clearNegotiation(payload.lotMatch, payload.requestedBy).pipe(\r\n                    mergeMap(() => {\r\n                        return [negotiationActions.ClearNegotiationSuccess()];\r\n                    }),\r\n                    catchError((error) => {\r\n                        console.log('ReqCompleteNegotiation: ', error.message);\r\n                        this.snackbar.open(\r\n                            'Failed to send Email, please try again',\r\n                            'CLOSE',\r\n                            snackBarConfigs.notificationConfig,\r\n                        );\r\n                        return [negotiationActions.ClearNegotiationFail()];\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n    // #endregion\r\n\r\n    //#region DELETE\r\n    //#endregion\r\n\r\n    constructor(\r\n        private actions$: Actions,\r\n        private api: ApiService,\r\n        private store: Store<fromRoot.State>,\r\n        private snackbar: MatSnackBar,\r\n        private router: Router,\r\n    ) {}\r\n}\r\n"],"names":["NEGOTIATING_ROOM_ROUTE","Router","MatSnackBar","Store","select","ApiService","Actions","ofType","createEffect","switchMap","mergeMap","catchError","take","negotiationActions","fromRoot","snackBarConfigs","NegotiationEffects","constructor","actions$","api","store","snackbar","router","ReqUserNegotiations$","pipe","ReqUserNegotiationCards","payload","clientUid","authSelectors","getUserEntities","entities","getEntityById","id","entity","tradingEntityId","tradingEntities","getUserNegotiationCards","negotiationCards","activeNegotiationCards","filter","card","isCompleted","completedNegotiationCards","UserNegotiationCardsSuccess","error","console","log","message","UserNegotiationCardsFail","ReqGetAvailableMatchIds$","ReqGetAvailableMatchIds","getAvailableMatchedIds","lotMatchId","lotMatchIds","GetAvailableMatchIdsSuccess","GetAvailableMatchIdsFail","ReqLatestLotMatchIteration$","ReqLatestLotMatchIteration","getLotMatchIterations","lotMatchIterations","latestMatch","splice","LatestLotMatchIterationSuccess","open","notificationConfig","LatestLotMatchIterationFail","ReqCompleteNegotiation$","ReqCompleteNegotiation","completeNegotiation","lotMatch","clientHasBroker","counterPartyHasBroker","CompleteNegotiationSuccess","CompleteNegotiationFail","ReqDeclineNegotiation$","ReqDeclineNegotiation","declineNegotiation","updatedActiveNegotiationIds","activeNegotiationIds","activeNegotiationId","length","navigate","DeclineNegotiationSuccess","DeclineNegotiationFail","ReqClearNegotiation$","ReqClearNegotiation","clearNegotiation","requestedBy","ClearNegotiationSuccess","ClearNegotiationFail","_","i0","ɵɵinject","i1","i2","i3","i4","i5","_2","factory","ɵfac"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}