{"version":3,"file":"default-src_app_core_ngrx_entities_lot_lot_effects_ts-src_app_core_ngrx_entities_match_match_-646100.js","mappings":"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","sources":["./src/app/core/ngrx/entities/lot/lot.effects.ts","./src/app/core/ngrx/entities/match/match.effects.ts","./src/app/core/services/lotMatch/lot-match.service.ts","./src/app/core/services/lot/lot.service.ts","./src/app/features/shared/components/confirmation-modal/confirmation-modal.component.ts","./src/app/features/shared/components/confirmation-modal/confirmation-modal.component.html","./src/app/features/shared/components/step-info-modal/step-info-modal.component.ts","./src/app/features/shared/components/step-info-modal/step-info-modal.component.html","./src/app/features/shared/components/verification-badge/verification-badge.component.ts","./src/app/features/shared/components/verification-badge/verification-badge.component.html"],"sourcesContent":["import { Lot } from 'src/app/core/models/queryModels';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { LotService } from './../../../services/lot/lot.service';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { ApiService } from 'src/app/core/services/api/api.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\n\r\nimport { switchMap, mergeMap, catchError, take } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\n\r\nimport * as actions from 'src/app/core/helpers/index.actions';\r\nimport * as fromRoot from 'src/app/core/ngrx/reducers/index';\r\nimport * as snackBarConfigs from '../../../helpers/snackbar';\r\n\r\n@Injectable()\r\nexport class LotEffects {\r\n    // #region CREATE\r\n    // #region ReqCreateLot\r\n    ReqCreateLot$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(actions.lotActions.ReqCreateLot),\r\n            switchMap((payload) => {\r\n                const clientUid = payload.clientUid ? payload.clientUid : null;\r\n                return this.store.pipe(\r\n                    select(fromRoot.authSelectors.getUserEntities),\r\n                    take(1),\r\n                    switchMap((entities) => {\r\n                        return this.api.getEntityById(entities[0].id);\r\n                    }),\r\n                    switchMap((entity) => {\r\n                        const lot: Lot = { ...payload.lot, tradingEntityId: entity.tradingEntities[0].id };\r\n                        return this.api.createLot(lot, clientUid);\r\n                    }),\r\n                    mergeMap((lot) => {\r\n                        this.snackbar.open('Successfully Created The Lot', 'CLOSE', snackBarConfigs.notificationConfig);\r\n                        return [actions.lotActions.CreateLotSuccess({ lot })];\r\n                    }),\r\n                    catchError((error) => {\r\n                        console.log('ReqCreateLot: ', error.message);\r\n                        this.snackbar.open(\r\n                            'An Error Occurred When Attempting To Create The Lot',\r\n                            'CLOSE',\r\n                            snackBarConfigs.errorConfig,\r\n                        );\r\n                        return [actions.lotActions.CreateLotFail()];\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n    // #endregion\r\n\r\n    // #region READ\r\n\r\n    // #region ReqUserLots\r\n    ReqUserLots$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(actions.lotActions.ReqUserLots),\r\n            mergeMap((payload) => {\r\n                return this.store.pipe(\r\n                    select(fromRoot.authSelectors.getUserEntities),\r\n                    take(1),\r\n                    switchMap((entities) => {\r\n                        return this.api.getEntityById(entities[0].id);\r\n                    }),\r\n                    switchMap((entity) => {\r\n                        const tradingEntityId = entity.tradingEntities[0].id;\r\n\r\n                        return this.api.getUserLotCards(tradingEntityId);\r\n                    }),\r\n                    switchMap((lotCards) => {\r\n                        return [actions.lotActions.UserLotsSuccess({ lotCards })];\r\n                    }),\r\n                    catchError((error) => {\r\n                        console.log('ReqUserLots: ', error.message);\r\n                        return [actions.lotActions.UserLotsFail()];\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n\r\n    // #region ReqLotFormData\r\n    ReqLotFormData$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(actions.lotActions.ReqLotFormData),\r\n            mergeMap((payload) => {\r\n                return this.store.pipe(\r\n                    select(fromRoot.authSelectors.getUserEntities),\r\n                    take(1),\r\n                    switchMap((entities) => {\r\n                        return this.lotService.getLotFormData(payload.lotId, entities[0].id).pipe(\r\n                            mergeMap(\r\n                                ([\r\n                                    lot,\r\n                                    deliveryPoints,\r\n                                    publicDeliveryPoints,\r\n                                    crops,\r\n                                    incoTerms,\r\n                                    paymentOptions,\r\n                                    unitsOfMeasure,\r\n                                ]) => {\r\n                                    return [\r\n                                        actions.lotActions.LotFormDataSuccess({\r\n                                            lot,\r\n                                            deliveryPoints: [...deliveryPoints, ...publicDeliveryPoints],\r\n                                            crops,\r\n                                            incoTerms,\r\n                                            paymentOptions,\r\n                                            unitsOfMeasure,\r\n                                        }),\r\n                                    ];\r\n                                },\r\n                            ),\r\n                            catchError((error) => {\r\n                                console.log('ReqLotFormData: ', error.message);\r\n                                return [actions.lotActions.LotFormDataFail()];\r\n                            }),\r\n                        );\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n    // #endregion\r\n\r\n    // #region UPDATE\r\n    // #region ReqUpdateLot\r\n    ReqUpdateLot$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(actions.lotActions.ReqUpdateLot),\r\n            switchMap(({ lot, clientUid }) => {\r\n                const lotChanges = {\r\n                    ...lot,\r\n                };\r\n                return this.api.updateLot(lotChanges, clientUid);\r\n            }),\r\n            switchMap((lot) => {\r\n                this.snackbar.open('Successfully Updated The Lot', 'CLOSE', snackBarConfigs.successConfig);\r\n                return [actions.lotActions.UpdateLotSuccess({ lot })];\r\n            }),\r\n            catchError((error) => {\r\n                console.log('ReqUpdateLot: ', error.message);\r\n                this.snackbar.open(\r\n                    'An Error Occurred When Attempting To Update The Lot',\r\n                    'CLOSE',\r\n                    snackBarConfigs.errorConfig,\r\n                );\r\n                return [actions.lotActions.UpdateLotFail()];\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n    // #endregion\r\n\r\n    // #region PRIVATISE LOTS\r\n    ReqPrivatiseLots$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(actions.lotActions.ReqPrivatiseLots),\r\n            switchMap(({ lotIds }) => {\r\n                return this.api.privatiseLots(lotIds).pipe(\r\n                    switchMap(() => {\r\n                        return [actions.lotActions.PrivatiseLotsSuccess()];\r\n                    }),\r\n                    catchError((error) => {\r\n                        console.log('ReqPrivatiseLots: ', error.message);\r\n                        this.snackbar.open(\r\n                            'Oh Snap, something went wrong while trying to privatise the lots.',\r\n                            'CLOSE',\r\n                            snackBarConfigs.errorConfig,\r\n                        );\r\n                        return [actions.lotActions.PrivatiseLotsFail()];\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    //#endregion\r\n\r\n    //#region DELETE\r\n    ReqDeleteLot$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(actions.lotActions.ReqDeleteLot),\r\n            mergeMap((payload) => {\r\n                const clientUid = payload.clientUid ? payload.clientUid : null;\r\n                return of(payload).pipe(\r\n                    mergeMap(({ lotId }) => {\r\n                        return this.api.deleteLot(lotId, clientUid);\r\n                    }),\r\n                    mergeMap(({ id: lotId }) => {\r\n                        this.snackbar.open('Successfully Deleted The Lot.', 'CLOSE', snackBarConfigs.successConfig);\r\n                        return [actions.lotActions.DeleteLotSuccess({ lotId })];\r\n                    }),\r\n                    catchError((error) => {\r\n                        console.log('ReqDeleteLot: ', error.message);\r\n                        this.snackbar.open(\r\n                            'The update operation was cancelled. Deleting is not available for a Lot with open negotiations.',\r\n                            'CLOSE',\r\n                            snackBarConfigs.errorConfig,\r\n                        );\r\n                        return [actions.lotActions.DeleteLotFail()];\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    //#endregion\r\n\r\n    constructor(\r\n        private actions$: Actions,\r\n        private api: ApiService,\r\n        private store: Store<fromRoot.State>,\r\n        private lotService: LotService,\r\n        private snackbar: MatSnackBar,\r\n    ) {}\r\n}\r\n","import { LotMatchService } from './../../../services/lotMatch/lot-match.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { ApiService } from 'src/app/core/services/api/api.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\n\r\nimport { switchMap, mergeMap, catchError, take } from 'rxjs/operators';\r\n\r\nimport { matchActions } from 'src/app/core/helpers/index.actions';\r\nimport * as fromRoot from 'src/app/core/ngrx/reducers/index';\r\n\r\nimport * as snackBarConfigs from '../../../helpers/snackbar';\r\n\r\n@Injectable()\r\nexport class MatchEffects {\r\n    // #region CREATE\r\n    // #region ReqCreateLotMatch\r\n    ReqCreateLotMatch$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(matchActions.ReqCreateLotMatch),\r\n            mergeMap((payload) => {\r\n                return this.api.createLotMatch(payload.lotMatch).pipe(\r\n                    mergeMap(({ id }) => {\r\n                        return [matchActions.CreateLotMatchSuccess({ id })];\r\n                    }),\r\n                    catchError((error) => {\r\n                        console.log('ReqCreateLotMatch: ', error.message);\r\n                        this.snackbar.open(\r\n                            'An Error Occurred When Attempting To Create A Negotiation. Please try reload the page.',\r\n                            'CLOSE',\r\n                            snackBarConfigs.errorConfig,\r\n                        );\r\n                        return [matchActions.CreateLotMatchFail()];\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n\r\n    // #region ReqLotFormData\r\n    ReqLotFormData$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(matchActions.ReqLotMatchFormData),\r\n            mergeMap((payload) => {\r\n                return this.store.pipe(\r\n                    select(fromRoot.authSelectors.getUserEntities),\r\n                    take(1),\r\n                    switchMap((entities) => {\r\n                        return this.lotMatchService\r\n                            .getLotMatchFormData(payload.lotMatchId, entities[0].id, payload.clientUid)\r\n                            .pipe(\r\n                                mergeMap(\r\n                                    ([\r\n                                        lotMatchIterations,\r\n                                        deliveryPoints,\r\n                                        publicDeliveryPoints,\r\n                                        crops,\r\n                                        incoTerms,\r\n                                        paymentOptions,\r\n                                        unitsOfMeasure,\r\n                                    ]) => {\r\n                                        return [\r\n                                            matchActions.LotMatchFormDataSuccess({\r\n                                                lotMatchIterations,\r\n                                                deliveryPoints: [...deliveryPoints, ...publicDeliveryPoints],\r\n                                                crops,\r\n                                                incoTerms,\r\n                                                paymentOptions,\r\n                                                unitsOfMeasure,\r\n                                            }),\r\n                                        ];\r\n                                    },\r\n                                ),\r\n                                catchError((error) => {\r\n                                    console.log('ReqLotMatchFormData: ', error.message);\r\n                                    this.snackbar.open(\r\n                                        'There was an error when attempting to submit your match. Please refresh the page and try again.',\r\n                                        'CLOSE',\r\n                                        snackBarConfigs.notificationConfig,\r\n                                    );\r\n                                    return [matchActions.LotMatchFormDataFail()];\r\n                                }),\r\n                            );\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n\r\n    // #endregion\r\n\r\n    // #region READ\r\n    // #region ReqLoadLotMatches\r\n    ReqLoadLotMatches$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(matchActions.ReqLoadLotMatches),\r\n            mergeMap((payload) => {\r\n                return this.api.getLotMatches(payload.lotId, payload.radius).pipe(\r\n                    mergeMap((lotMatches) => {\r\n                        return [matchActions.LoadLotMatchesSuccess({ matches: lotMatches })];\r\n                    }),\r\n                    catchError((error) => {\r\n                        console.log('ReqLoadLotMatches: ', error.message);\r\n                        return [matchActions.LoadLotMatchesFail()];\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n\r\n    // #region ReqLotHasBrokerCheck\r\n    ReqLotHasBrokerCheck$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(matchActions.ReqLotHasBrokerCheck),\r\n            mergeMap((payload) => {\r\n                return this.api.getHasBroker(payload.lotIds).pipe(\r\n                    mergeMap((hasBroker) => {\r\n                        return [matchActions.ReqLotHasBrokerCheckSuccess(hasBroker)];\r\n                    }),\r\n                    catchError((error) => {\r\n                        console.log('ReqLotHasBrokerCheck: ', error.message);\r\n                        return [matchActions.ReqLotHasBrokerCheckFail()];\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n\r\n    // #endregion\r\n\r\n    // #region UPDATE\r\n    ReqUpdateLotMatch$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(matchActions.ReqUpdateLotMatch),\r\n            mergeMap((payload) => {\r\n                return this.api.updateLotMatch(payload.lotMatch).pipe(\r\n                    mergeMap((lotMatchIteration) => {\r\n                        return [matchActions.UpdateLotMatchSuccess({ lotMatchIteration })];\r\n                    }),\r\n                    catchError((error) => {\r\n                        console.log('ReqUpdateLotMatch: ', error.message);\r\n                        this.snackbar.open(\r\n                            'An Error Occurred When Attempting To Update The Negotiation. Please try reload the page.',\r\n                            'CLOSE',\r\n                            snackBarConfigs.errorConfig,\r\n                        );\r\n                        return [matchActions.UpdateLotMatchFail()];\r\n                    }),\r\n                );\r\n            }),\r\n        ),\r\n    );\r\n    // #endregion\r\n\r\n    // #region DELETE\r\n\r\n    // #endregion\r\n\r\n    constructor(\r\n        private actions$: Actions,\r\n        private api: ApiService,\r\n        private store: Store<fromRoot.State>,\r\n        private lotMatchService: LotMatchService,\r\n        private snackbar: MatSnackBar,\r\n    ) {}\r\n}\r\n","import { GetLotMatchFormDataResponse } from './../../helpers/queryTypes';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { combineLatest, of } from 'rxjs';\r\nimport { ApiService } from 'src/app/core/services/api/api.service';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LotMatchService {\r\n    constructor(private api: ApiService) {}\r\n\r\n    getLotMatchFormData(lotMatchId: number, entityId: number, clientUid: string = null) {\r\n        if (lotMatchId) {\r\n            return combineLatest([\r\n                combineLatest([\r\n                    this.api.getLotMatchIterations(lotMatchId, clientUid),\r\n                    this.api.getEntitysDeliveryPoints(entityId),\r\n                    this.api.getPublicDeliveryPoints(),\r\n                    this.api.getAllCrops(),\r\n                ]),\r\n                combineLatest([this.api.getIncoTerms(), this.api.getPaymentOptions(), this.api.getUnitOfMeasure()]),\r\n            ]).pipe(\r\n                map(\r\n                    ([\r\n                        [lotMatchIterations, entityDeliveryPoints, publicDeliverPoints, crops],\r\n                        [incoTerms, paymentOptions, unitsOfMeasure],\r\n                    ]): GetLotMatchFormDataResponse => {\r\n                        return [\r\n                            lotMatchIterations,\r\n                            entityDeliveryPoints,\r\n                            publicDeliverPoints,\r\n                            crops,\r\n                            incoTerms,\r\n                            paymentOptions,\r\n                            unitsOfMeasure,\r\n                        ];\r\n                    },\r\n                ),\r\n                take(1),\r\n            );\r\n        } else {\r\n            return combineLatest([\r\n                combineLatest([\r\n                    of(null),\r\n                    this.api.getEntitysDeliveryPoints(entityId),\r\n                    this.api.getPublicDeliveryPoints(),\r\n                    this.api.getAllCrops(),\r\n                ]),\r\n                combineLatest([this.api.getIncoTerms(), this.api.getPaymentOptions(), this.api.getUnitOfMeasure()]),\r\n            ]).pipe(\r\n                map(\r\n                    ([\r\n                        [lotMatchIterations, entityDeliveryPoints, publicDeliverPoints, crops],\r\n                        [incoTerms, paymentOptions, unitsOfMeasure],\r\n                    ]): GetLotMatchFormDataResponse => {\r\n                        return [\r\n                            lotMatchIterations,\r\n                            entityDeliveryPoints,\r\n                            publicDeliverPoints,\r\n                            crops,\r\n                            incoTerms,\r\n                            paymentOptions,\r\n                            unitsOfMeasure,\r\n                        ];\r\n                    },\r\n                ),\r\n                take(1),\r\n            );\r\n        }\r\n    }\r\n}\r\n","import { GetLotFormDataResponse } from './../../helpers/queryTypes';\r\nimport { IdName, DeliveryPoint, Lot } from 'src/app/core/models/queryModels';\r\nimport { ApiService } from 'src/app/core/services/api/api.service';\r\nimport { combineLatest, of } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, take } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LotService {\r\n    constructor(private api: ApiService) {}\r\n    getLotFormData(lotId: number, entityId: number) {\r\n        if (lotId) {\r\n            return combineLatest([\r\n                combineLatest([\r\n                    this.api.getLotById(lotId),\r\n                    this.api.getEntitysDeliveryPoints(entityId),\r\n                    this.api.getPublicDeliveryPoints(),\r\n                    this.api.getAllCrops(),\r\n                ]),\r\n                combineLatest([this.api.getIncoTerms(), this.api.getPaymentOptions(), this.api.getUnitOfMeasure()]),\r\n            ]).pipe(\r\n                map(\r\n                    ([\r\n                        [lot, entityDeliveryPoints, publicDeliverPoints, crops],\r\n                        [incoTerms, paymentOptions, unitsOfMeasure],\r\n                    ]): GetLotFormDataResponse => {\r\n                        return [\r\n                            lot,\r\n                            entityDeliveryPoints,\r\n                            publicDeliverPoints,\r\n                            crops,\r\n                            incoTerms,\r\n                            paymentOptions,\r\n                            unitsOfMeasure,\r\n                        ];\r\n                    },\r\n                ),\r\n                take(1),\r\n            );\r\n        } else {\r\n            return combineLatest([\r\n                combineLatest([\r\n                    of(null),\r\n                    this.api.getEntitysDeliveryPoints(entityId),\r\n                    this.api.getPublicDeliveryPoints(),\r\n                    this.api.getAllCrops(),\r\n                ]),\r\n                combineLatest([this.api.getIncoTerms(), this.api.getPaymentOptions(), this.api.getUnitOfMeasure()]),\r\n            ]).pipe(\r\n                map(\r\n                    ([\r\n                        [lot, entityDeliveryPoints, publicDeliverPoints, crops],\r\n                        [incoTerms, paymentOptions, unitsOfMeasure],\r\n                    ]): GetLotFormDataResponse => {\r\n                        return [\r\n                            lot,\r\n                            entityDeliveryPoints,\r\n                            publicDeliverPoints,\r\n                            crops,\r\n                            incoTerms,\r\n                            paymentOptions,\r\n                            unitsOfMeasure,\r\n                        ];\r\n                    },\r\n                ),\r\n                take(1),\r\n            );\r\n        }\r\n    }\r\n}\r\n","import { MatLegacyButtonModule as MatButtonModule } from '@angular/material/legacy-button';\r\nimport { Component, Inject, NgModule, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatLegacyDialogRef as MatDialogRef, MAT_LEGACY_DIALOG_DATA as MAT_DIALOG_DATA } from '@angular/material/legacy-dialog';\r\n\r\n@Component({\r\n    selector: 'app-confirmation-modal',\r\n    templateUrl: './confirmation-modal.component.html',\r\n    styleUrls: ['./confirmation-modal.component.scss'],\r\n})\r\nexport class ConfirmationModalComponent implements OnInit {\r\n    currentAction: string;\r\n    currentItem: string;\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<ConfirmationModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this.currentAction = this.data.currentAction;\r\n        this.currentItem = this.data.currentItem;\r\n    }\r\n\r\n    handleCloseModal() {\r\n        this.dialogRef.close(false);\r\n    }\r\n\r\n    handleConfirmAction() {\r\n        this.dialogRef.close(true);\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    declarations: [ConfirmationModalComponent],\r\n    imports: [CommonModule, MatButtonModule],\r\n    exports: [ConfirmationModalComponent],\r\n})\r\nexport class ConfirmationComponentModule {}\r\n","<div class=\"l-container\">\r\n    <!-- #region Modal Content -->\r\n\r\n    <div class=\"l-content\">\r\n        <!-- #region Header -->\r\n\r\n        <div class=\"l-header\">\r\n            <img\r\n                class=\"l-close-icon\"\r\n                src=\"./assets/icons/close-icon-dark.svg\"\r\n                alt=\"close\"\r\n                (click)=\"handleCloseModal()\"\r\n            />\r\n            <h2 class=\"g-text-h2-dark my-3\">\r\n                <b>You are about to {{ currentAction }} a {{ currentItem }}</b>\r\n            </h2>\r\n        </div>\r\n\r\n        <!-- #endregion -->\r\n\r\n        <p class=\"g-text-p-dark\">\r\n            This will {{ currentAction === 'decline' ? 'remove' : currentAction }} the selected {{ currentItem }} from\r\n            the list.\r\n        </p>\r\n        <p class=\"g-text-p-dark my-3\">Are you sure?</p>\r\n\r\n        <!-- #region Buttons -->\r\n\r\n        <div class=\"l-buttons-container\">\r\n            <button class=\"g-secondary-button mr-1\" (click)=\"handleCloseModal()\">Cancel</button>\r\n            <button mat-flat-button class=\"g-primary-button ml-1\" (click)=\"handleConfirmAction()\">\r\n                {{ currentAction | titlecase }}\r\n                <img\r\n                    *ngIf=\"currentAction === 'delete'\"\r\n                    class=\"l-delete-icon\"\r\n                    src=\"./assets/icons/delete-icon.svg\"\r\n                    alt=\"delete\"\r\n                />\r\n            </button>\r\n        </div>\r\n\r\n        <!-- #endregion -->\r\n    </div>\r\n\r\n    <!-- #endregion -->\r\n</div>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatLegacyDialogRef as MatDialogRef, MAT_LEGACY_DIALOG_DATA as MAT_DIALOG_DATA } from '@angular/material/legacy-dialog';\r\nimport { StepInfo } from 'src/app/core/models/viewModels';\r\n\r\n@Component({\r\n    selector: 'app-step-info-modal',\r\n    templateUrl: './step-info-modal.component.html',\r\n    styleUrls: ['./step-info-modal.component.scss'],\r\n})\r\nexport class StepInfoModalComponent implements OnInit {\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<StepInfoModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: { stepInfo: StepInfo },\r\n    ) {}\r\n\r\n    ngOnInit(): void {}\r\n\r\n    handleClose(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n","<div class=\"l-container\">\r\n    <!-- #region Header -->\r\n\r\n    <div class=\"l-header\">\r\n        <img class=\"l-close-icon\" src=\"./assets/icons/close-icon-dark.svg\" alt=\"close\" (click)=\"handleClose()\" />\r\n\r\n        <img class=\"l-icon\" src=\"{{ data.stepInfo?.iconPath }}\" alt=\"icon\" />\r\n\r\n        <h1 class=\"g-text-h1-dark\">\r\n            <b>{{ data.stepInfo?.heading }}</b>\r\n        </h1>\r\n    </div>\r\n\r\n    <!-- #endregion -->\r\n\r\n    <!-- #region Modal Content -->\r\n\r\n    <div class=\"l-content g-text-p-dark\">\r\n        <p [innerHTML]=\"data.stepInfo?.body\" ></p>\r\n    </div>\r\n\r\n    <!-- #endregion -->\r\n\r\n    <!-- #region Buttons -->\r\n\r\n    <button class=\"g-primary-button\" (click)=\"handleClose()\">Okay, got it!</button>\r\n\r\n    <!-- #endregion -->\r\n</div>\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component, Input, NgModule, OnInit } from '@angular/core';\r\nimport { Dictionary } from '@ngrx/entity';\r\nimport { VerificationType } from 'src/app/core/models/viewModels';\r\n\r\n@Component({\r\n    selector: 'app-verification-badge',\r\n    templateUrl: './verification-badge.component.html',\r\n    styleUrls: ['./verification-badge.component.scss'],\r\n})\r\nexport class VerificationBadgeComponent implements OnInit {\r\n    @Input() verificationTypes: Dictionary<VerificationType> = {};\r\n    @Input() isOwn: boolean = false;\r\n    @Input() verificationId: number = 6;\r\n\r\n    constructor() {}\r\n\r\n    ngOnInit(): void {}\r\n}\r\n\r\n@NgModule({\r\n    declarations: [VerificationBadgeComponent],\r\n    imports: [CommonModule],\r\n    exports: [VerificationBadgeComponent],\r\n})\r\nexport class VerificationBadgeModule {}\r\n","<div class=\"l-container g-fade-in\">\r\n    <h2 class=\"g-text-h2\">{{ !isOwn ? 'Counterparty ' : '' }}Verification:</h2>\r\n    <div class=\"l-img-container\">\r\n        <img class=\"l-img\" [src]=\"verificationTypes[verificationId].source\" alt=\"verification-icon\" />\r\n    </div>\r\n    <p class=\"g-text-p g-text-grey\">{{ verificationTypes[verificationId].name }}</p>\r\n</div>\r\n"],"names":["MatSnackBar","LotService","Store","select","ApiService","Actions","createEffect","ofType","switchMap","mergeMap","catchError","take","of","actions","fromRoot","snackBarConfigs","LotEffects","constructor","actions$","api","store","lotService","snackbar","ReqCreateLot$","pipe","lotActions","ReqCreateLot","payload","clientUid","authSelectors","getUserEntities","entities","getEntityById","id","entity","lot","tradingEntityId","tradingEntities","createLot","open","notificationConfig","CreateLotSuccess","error","console","log","message","errorConfig","CreateLotFail","ReqUserLots$","ReqUserLots","getUserLotCards","lotCards","UserLotsSuccess","UserLotsFail","ReqLotFormData$","ReqLotFormData","getLotFormData","lotId","deliveryPoints","publicDeliveryPoints","crops","incoTerms","paymentOptions","unitsOfMeasure","LotFormDataSuccess","LotFormDataFail","ReqUpdateLot$","ReqUpdateLot","lotChanges","updateLot","successConfig","UpdateLotSuccess","UpdateLotFail","ReqPrivatiseLots$","ReqPrivatiseLots","lotIds","privatiseLots","PrivatiseLotsSuccess","PrivatiseLotsFail","ReqDeleteLot$","ReqDeleteLot","deleteLot","DeleteLotSuccess","DeleteLotFail","_","i0","ɵɵinject","i1","i2","i3","i4","i5","_2","factory","ɵfac","LotMatchService","matchActions","MatchEffects","lotMatchService","ReqCreateLotMatch$","ReqCreateLotMatch","createLotMatch","lotMatch","CreateLotMatchSuccess","CreateLotMatchFail","ReqLotMatchFormData","getLotMatchFormData","lotMatchId","lotMatchIterations","LotMatchFormDataSuccess","LotMatchFormDataFail","ReqLoadLotMatches$","ReqLoadLotMatches","getLotMatches","radius","lotMatches","LoadLotMatchesSuccess","matches","LoadLotMatchesFail","ReqLotHasBrokerCheck$","ReqLotHasBrokerCheck","getHasBroker","hasBroker","ReqLotHasBrokerCheckSuccess","ReqLotHasBrokerCheckFail","ReqUpdateLotMatch$","ReqUpdateLotMatch","updateLotMatch","lotMatchIteration","UpdateLotMatchSuccess","UpdateLotMatchFail","map","combineLatest","entityId","getLotMatchIterations","getEntitysDeliveryPoints","getPublicDeliveryPoints","getAllCrops","getIncoTerms","getPaymentOptions","getUnitOfMeasure","entityDeliveryPoints","publicDeliverPoints","providedIn","getLotById","MatLegacyButtonModule","MatButtonModule","CommonModule","MatLegacyDialogRef","MatDialogRef","MAT_LEGACY_DIALOG_DATA","MAT_DIALOG_DATA","ɵɵelement","ConfirmationModalComponent","dialogRef","data","ngOnInit","currentAction","currentItem","handleCloseModal","close","handleConfirmAction","ɵɵdirectiveInject","selectors","decls","vars","consts","template","ConfirmationModalComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","ConfirmationModalComponent_Template_img_click_3_listener","ɵɵelementEnd","ɵɵtext","ConfirmationModalComponent_Template_button_click_12_listener","ConfirmationModalComponent_Template_button_click_14_listener","ɵɵtemplate","ConfirmationModalComponent_img_17_Template","ɵɵadvance","ɵɵtextInterpolate2","ɵɵtextInterpolate1","ɵɵpipeBind1","ɵɵproperty","ConfirmationComponentModule","_3","declarations","imports","exports","StepInfoModalComponent","handleClose","StepInfoModalComponent_Template","StepInfoModalComponent_Template_img_click_2_listener","StepInfoModalComponent_Template_button_click_9_listener","ɵɵpropertyInterpolate","stepInfo","iconPath","ɵɵsanitizeUrl","ɵɵtextInterpolate","heading","body","ɵɵsanitizeHtml","Dictionary","VerificationBadgeComponent","verificationTypes","isOwn","verificationId","inputs","VerificationBadgeComponent_Template","source","name","VerificationBadgeModule"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}