{"version":3,"file":"default-src_app_features_shared_components_crop-categories_crop-categories_component_ts.js","mappings":"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","sources":["./src/app/features/shared/components/crop-categories/crop-categories.component.ts","./src/app/features/shared/components/crop-categories/crop-categories.component.html"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, NgModule, OnInit, Output } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatLegacyDialog as MatDialog } from '@angular/material/legacy-dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { cropCategoriesImages, LOTS_CREATE_ROUTE } from 'src/app/core/helpers/constants';\r\nimport { IdName, ScoutType } from 'src/app/core/models/queryModels';\r\nimport { CropCategoryCardData } from 'src/app/core/models/viewModels';\r\nimport { environment } from 'src/environments/environment.prod';\r\nimport { CategoryInfoModalComponent } from '../category-info-modal/category-info-modal/category-info-modal.component';\r\n\r\n@Component({\r\n    selector: 'app-crop-categories',\r\n    templateUrl: './crop-categories.component.html',\r\n    styleUrls: ['./crop-categories.component.scss'],\r\n})\r\nexport class CropCategoriesComponent implements OnInit {\r\n    @Input() get cropCategories(): IdName[] {\r\n        return this._cropCategoryCards;\r\n    }\r\n    set cropCategories(value: IdName[]) {\r\n        this._cropCategoryCards = [];\r\n        const activeCropCategories: IdName[] = value.filter((v) => environment.CROP_CATEGORIES.includes(v.id));\r\n        const inActiveCropCategories: IdName[] = value.filter((v) => !environment.CROP_CATEGORIES.includes(v.id));\r\n        const orderedCropCategories: IdName[] = [...activeCropCategories, ...inActiveCropCategories];\r\n        for (let i = 0; i < orderedCropCategories.length; i++) {\r\n            this._cropCategoryCards.push({\r\n                ...orderedCropCategories[i],\r\n                ...cropCategoriesImages.find(\r\n                    (cropCategoriesImage) => cropCategoriesImage.name === orderedCropCategories[i].name,\r\n                ),\r\n                isAvailable: environment.CROP_CATEGORIES.includes(orderedCropCategories[i].id),\r\n            });\r\n        }\r\n    }\r\n\r\n    @Output() $changeCropCategoryEvent: EventEmitter<number> = new EventEmitter();\r\n\r\n    _cropCategoryCards: CropCategoryCardData[] = [];\r\n\r\n    lotType: ScoutType;\r\n    isScoutCreate: boolean = false;\r\n\r\n    constructor(private route: ActivatedRoute, private router: Router, private dialog: MatDialog) {}\r\n\r\n    ngOnInit(): void {\r\n        this.route.url.pipe(take(1)).subscribe(() => {\r\n            if (this.route.snapshot.url[0].path === 'create') {\r\n                this.isScoutCreate = true;\r\n            }\r\n        });\r\n\r\n        this.route.queryParams.pipe(take(1)).subscribe(({ lotType }) => {\r\n            if (lotType) {\r\n                this.lotType = lotType;\r\n            }\r\n        });\r\n    }\r\n\r\n    handleChooseCropCategory(id: number, isAvailable: boolean) {\r\n        if (isAvailable) {\r\n            this.isScoutCreate\r\n                ? this.$changeCropCategoryEvent.emit(id)\r\n                : this.router.navigate([LOTS_CREATE_ROUTE], {\r\n                      queryParams: { lotType: this.lotType, cropCategoryId: id },\r\n                  });\r\n        }\r\n    }\r\n\r\n    handleInfoModal(id: number, src: string, name: string, e: Event): void {\r\n        e.stopPropagation();\r\n        this.dialog.open(CategoryInfoModalComponent, {\r\n            panelClass: 'g-modal-container',\r\n            data: {\r\n                categoryId: id,\r\n                iconSource: src,\r\n                categoryName: name,\r\n            },\r\n        });\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    declarations: [CropCategoriesComponent],\r\n    imports: [CommonModule, MatRippleModule],\r\n    exports: [CropCategoriesComponent],\r\n})\r\nexport class CropCategoriesModule {}\r\n","<div class=\"l-container\" [class.l-container-scout]=\"isScoutCreate\">\r\n    <!-- #region Card -->\r\n\r\n    <div\r\n        *ngFor=\"let cropCategoryCard of _cropCategoryCards\"\r\n        class=\"l-card\"\r\n        [class.l-coming-soon]=\"!cropCategoryCard.isAvailable\"\r\n        (click)=\"handleChooseCropCategory(cropCategoryCard.id, cropCategoryCard.isAvailable)\"\r\n        matRipple\r\n    >\r\n        <div class=\"l-card-img-container\">\r\n            <img class=\"l-card-img\" [src]=\"cropCategoryCard.source\" [alt]=\"cropCategoryCard.sourceAlt\" />\r\n        </div>\r\n        <div class=\"l-card-title-container\">\r\n            <h2 class=\"g-text-h2 m-0\">{{ cropCategoryCard.name }}</h2>\r\n        </div>\r\n        <!-- #region Info Icon -->\r\n\r\n        <ng-container\r\n            *ngIf=\"\r\n                cropCategoryCard.name == 'Grains & Oilseeds' ||\r\n                cropCategoryCard.name == 'Roughage (Bales)' ||\r\n                cropCategoryCard.name == 'Legumes & Pulses' ||\r\n                cropCategoryCard.name == 'Byproducts' ||\r\n                cropCategoryCard.name == 'SAFEX Forward Hedging'\r\n            \"\r\n        >\r\n            <img\r\n                class=\"g-card-info-icon\"\r\n                src=\"./assets/icons/info-icon-blue.svg\"\r\n                alt=\"info icon\"\r\n                (click)=\"handleInfoModal(cropCategoryCard.id, cropCategoryCard.source, cropCategoryCard.name, $event)\"\r\n            />\r\n        </ng-container>\r\n\r\n        <!-- #endregion -->\r\n        <img\r\n            *ngIf=\"!cropCategoryCard.isAvailable\"\r\n            class=\"l-coming-soon-banner-img\"\r\n            src=\"./assets/images/coming-soon-banner.png\"\r\n            alt=\"Green banner thats reads 'coming soon'\"\r\n        />\r\n    </div>\r\n\r\n    <!-- #endregion -->\r\n</div>\r\n"],"names":["CommonModule","EventEmitter","MatRippleModule","MatLegacyDialog","MatDialog","ActivatedRoute","Router","take","cropCategoriesImages","LOTS_CREATE_ROUTE","environment","CategoryInfoModalComponent","i0","ɵɵelementContainerStart","ɵɵelementStart","ɵɵlistener","CropCategoriesComponent_div_1_ng_container_6_Template_img_click_1_listener","$event","ɵɵrestoreView","_r6","cropCategoryCard_r1","ɵɵnextContext","$implicit","ctx_r4","ɵɵresetView","handleInfoModal","id","source","name","ɵɵelementEnd","ɵɵelementContainerEnd","ɵɵelement","CropCategoriesComponent_div_1_Template_div_click_0_listener","restoredCtx","_r8","ctx_r7","handleChooseCropCategory","isAvailable","ɵɵtext","ɵɵtemplate","CropCategoriesComponent_div_1_ng_container_6_Template","CropCategoriesComponent_div_1_img_7_Template","ɵɵclassProp","ɵɵadvance","ɵɵproperty","ɵɵsanitizeUrl","sourceAlt","ɵɵtextInterpolate","CropCategoriesComponent","cropCategories","_cropCategoryCards","value","activeCropCategories","filter","v","CROP_CATEGORIES","includes","inActiveCropCategories","orderedCropCategories","i","length","push","find","cropCategoriesImage","constructor","route","router","dialog","$changeCropCategoryEvent","isScoutCreate","ngOnInit","url","pipe","subscribe","snapshot","path","queryParams","lotType","emit","navigate","cropCategoryId","src","e","stopPropagation","open","panelClass","data","categoryId","iconSource","categoryName","_","ɵɵdirectiveInject","i1","i2","_2","selectors","inputs","outputs","decls","vars","consts","template","CropCategoriesComponent_Template","rf","ctx","CropCategoriesComponent_div_1_Template","CropCategoriesModule","_3","declarations","imports","exports"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}